/* parser generated by jison 0.4.18 */
/*
  Returns a Parser object of the following structure:

  Parser: {
    yy: {}
  }

  Parser.prototype: {
    yy: {},
    trace: function(),
    symbols_: {associative list: name ==> number},
    terminals_: {associative list: number ==> name},
    productions_: [...],
    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),
    table: [...],
    defaultActions: {...},
    parseError: function(str, hash),
    parse: function(input),

    lexer: {
        EOF: 1,
        parseError: function(str, hash),
        setInput: function(input),
        input: function(),
        unput: function(str),
        more: function(),
        less: function(n),
        pastInput: function(),
        upcomingInput: function(),
        showPosition: function(),
        test_match: function(regex_match_array, rule_index),
        next: function(),
        lex: function(),
        begin: function(condition),
        popState: function(),
        _currentRules: function(),
        topState: function(),
        pushState: function(condition),

        options: {
            ranges: boolean           (optional: true ==> token location info will include a .range[] member)
            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)
            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)
        },

        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),
        rules: [...],
        conditions: {associative list: name ==> set},
    }
  }


  token location info (@$, _$, etc.): {
    first_line: n,
    last_line: n,
    first_column: n,
    last_column: n,
    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)
  }


  the parseError function receives a 'hash' object with these members for lexer and parser errors: {
    text:        (matched text)
    token:       (the produced terminal token, if any)
    line:        (yylineno)
  }
  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {
    loc:         (yylloc)
    expected:    (string describing the set of expected tokens)
    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)
  }
*/
var sqlParser = (function(){
var o=function(k,v,o,l){for(o=o||{},l=k.length;l--;o[k[l]]=v);return o},$V0=[1,8],$V1=[1,4],$V2=[2,4],$V3=[1,11],$V4=[1,10],$V5=[2,16],$V6=[1,14],$V7=[1,15],$V8=[1,16],$V9=[6,8],$Va=[2,147],$Vb=[1,19],$Vc=[1,20],$Vd=[16,34,35,36,38,39,40,41,42,43,44,47,48,52,53,56,57,59,60,62,77,80,82,83,84,85,87,88,89,102],$Ve=[16,18,33,34,35,36,38,39,40,41,42,43,44,47,48,52,53,56,57,59,60,62,77,80,82,83,84,85,87,88,89,102],$Vf=[2,161],$Vg=[1,29],$Vh=[6,8,14,17,147,151,153,155],$Vi=[1,42],$Vj=[1,59],$Vk=[1,51],$Vl=[1,58],$Vm=[1,60],$Vn=[1,61],$Vo=[1,62],$Vp=[1,63],$Vq=[1,64],$Vr=[1,57],$Vs=[1,52],$Vt=[1,53],$Vu=[1,54],$Vv=[1,55],$Vw=[1,56],$Vx=[1,43],$Vy=[1,44],$Vz=[1,45],$VA=[1,34],$VB=[16,34,36,38,39,40,41,42,43,44,47,48,52,53,56,57,59,60,62,77,80,82,83,84,85,87,88,89,102],$VC=[6,8,14,17,151,153,155],$VD=[2,144],$VE=[1,74],$VF=[1,75],$VG=[6,8,14,17,45,134,139,145,147,151,153,155],$VH=[1,80],$VI=[1,77],$VJ=[1,78],$VK=[1,79],$VL=[1,81],$VM=[6,8,14,17,38,45,51,52,53,72,73,75,78,90,108,125,126,127,128,130,134,136,139,142,143,145,147,151,153,155,158,165,166,168,169,174,178,180,181,183],$VN=[6,8,14,17,37,38,45,51,52,53,72,73,75,78,90,108,113,114,115,116,117,118,122,125,126,127,128,130,134,136,139,142,143,145,147,151,153,155,158,165,166,168,169,174,178,180,181,183],$VO=[1,102],$VP=[1,100],$VQ=[1,101],$VR=[1,96],$VS=[1,97],$VT=[1,98],$VU=[1,99],$VV=[1,103],$VW=[1,104],$VX=[1,105],$VY=[1,106],$VZ=[1,107],$V_=[1,108],$V$=[2,104],$V01=[6,8,14,17,37,38,45,47,51,52,53,72,73,75,78,80,82,90,92,93,94,95,96,97,98,99,100,102,106,107,108,109,110,111,113,114,115,116,117,118,122,125,126,127,128,130,134,136,139,142,143,145,147,151,153,155,158,165,166,168,169,174,178,180,181,183],$V11=[6,8,14,17,37,38,45,47,51,52,53,72,73,75,78,80,82,90,92,93,94,95,96,97,98,99,100,102,104,106,107,108,109,110,111,113,114,115,116,117,118,122,125,126,127,128,130,134,136,139,142,143,145,147,151,153,155,158,165,166,168,169,174,178,180,181,183],$V21=[1,109],$V31=[1,116],$V41=[2,65],$V51=[1,117],$V61=[16,34,38,39,40,41,42,43,44,47,48,52,53,56,57,59,60,62,77,80,82,83,84,85,87,88,89,102],$V71=[16,30,34,52,53,56,57,59,60,62,77,80,82,83,84,85,87,88,89,120],$V81=[1,162],$V91=[17,45],$Va1=[2,60],$Vb1=[1,171],$Vc1=[1,169],$Vd1=[1,170],$Ve1=[6,8,139,147],$Vf1=[16,34,39,40,41,42,43,44,47,48,52,53,56,57,59,60,62,77,80,82,83,84,85,87,88,89,102],$Vg1=[6,8,14,17,139,145,147,151,153,155],$Vh1=[6,8,14,17,38,45,51,52,53,72,73,75,78,90,126,127,128,130,134,136,139,142,143,145,147,151,153,155,158,165,166,168,169,174,178,180,181,183],$Vi1=[6,8,14,17,37,38,45,51,52,53,72,73,75,78,90,92,93,94,95,100,102,106,107,108,109,110,111,113,114,115,116,117,118,122,125,126,127,128,130,134,136,139,142,143,145,147,151,153,155,158,165,166,168,169,174,178,180,181,183],$Vj1=[6,8,14,17,37,38,45,51,52,53,72,73,75,78,80,82,90,92,93,94,95,100,102,106,107,108,109,110,111,113,114,115,116,117,118,122,125,126,127,128,130,134,136,139,142,143,145,147,151,153,155,158,165,166,168,169,174,178,180,181,183],$Vk1=[16,34,40,41,42,43,44,47,48,52,53,56,57,59,60,62,77,80,82,83,84,85,87,88,89,102],$Vl1=[16,34,41,42,43,44,47,48,52,53,56,57,59,60,62,77,80,82,83,84,85,87,88,89,102],$Vm1=[16,34,42,43,44,47,48,52,53,56,57,59,60,62,77,80,82,83,84,85,87,88,89,102],$Vn1=[72,75,78],$Vo1=[16,34,44,47,48,52,53,56,57,59,60,62,77,80,82,83,84,85,87,88,89,102],$Vp1=[16,34,47,48,52,53,56,57,59,60,62,77,80,82,83,84,85,87,88,89,102],$Vq1=[1,234],$Vr1=[1,235],$Vs1=[6,8,14,17],$Vt1=[6,8,14,17,45,158],$Vu1=[1,252],$Vv1=[1,248],$Vw1=[2,198],$Vx1=[1,256],$Vy1=[1,257],$Vz1=[6,8,14,17,45,130,136,139,145,147,151,153,155,183],$VA1=[1,259],$VB1=[1,262],$VC1=[1,263],$VD1=[1,264],$VE1=[1,265],$VF1=[2,175],$VG1=[1,261],$VH1=[6,8,14,17,38,45,90,130,136,139,145,147,151,153,155,165,166,168,169,174,178,180,181,183],$VI1=[6,8,14,17,136,139,145,147,151,153,155],$VJ1=[1,277],$VK1=[2,180],$VL1=[171,174],$VM1=[6,8,14,17,38,45,90,130,136,139,145,147,151,153,155,165,166,168,169,174,178,180,181,183,193,194,195],$VN1=[2,200],$VO1=[1,282],$VP1=[1,294],$VQ1=[1,302],$VR1=[1,303],$VS1=[1,304],$VT1=[6,8,14,17,139,147,151,153,155],$VU1=[1,314],$VV1=[1,320],$VW1=[1,321],$VX1=[2,205],$VY1=[1,332],$VZ1=[16,153],$V_1=[6,8,14,17,153,155],$V$1=[1,348];
var parser = {trace: function trace () { },
yy: {},
symbols_: {"error":2,"main":3,"selectClause":4,"semicolonOpt":5,"EOF":6,"unionClause":7,";":8,"unionClauseNotParenthesized":9,"unionClauseParenthesized":10,"order_by_opt":11,"limit_opt":12,"selectClauseParenthesized":13,"UNION":14,"distinctOpt":15,"(":16,")":17,"SELECT":18,"topOpt":19,"highPriorityOpt":20,"maxStateMentTimeOpt":21,"straightJoinOpt":22,"sqlSmallResultOpt":23,"sqlBigResultOpt":24,"sqlBufferResultOpt":25,"sqlCacheOpt":26,"sqlCalcFoundRowsOpt":27,"selectExprList":28,"selectDataSetOpt":29,"ALL":30,"DISTINCT":31,"DISTINCTROW":32,"TOP":33,"NUMERIC":34,"HIGH_PRIORITY":35,"MAX_STATEMENT_TIME":36,"=":37,"STRAIGHT_JOIN":38,"SQL_SMALL_RESULT":39,"SQL_BIG_RESULT":40,"SQL_BUFFER_RESULT":41,"SQL_CACHE":42,"SQL_NO_CACHE":43,"SQL_CALC_FOUND_ROWS":44,",":45,"selectExpr":46,"*":47,"SELECT_EXPR_STAR":48,"expr":49,"selectExprAliasOpt":50,"AS":51,"IDENTIFIER":52,"STRING":53,"string":54,"number":55,"EXPONENT_NUMERIC":56,"HEX_NUMERIC":57,"boolean":58,"TRUE":59,"FALSE":60,"null":61,"NULL":62,"literal":63,"function_call":64,"function_call_param_list":65,"function_call_param":66,"identifier":67,"DOT":68,"identifier_list":69,"case_expr_opt":70,"when_then_list":71,"WHEN":72,"THEN":73,"case_when_else":74,"ELSE":75,"case_when":76,"CASE":77,"END":78,"simple_expr_prefix":79,"+":80,"simple_expr":81,"-":82,"~":83,"!":84,"BINARY":85,"expr_list":86,"ROW":87,"EXISTS":88,"{":89,"}":90,"bit_expr":91,"|":92,"&":93,"<<":94,">>":95,"/":96,"DIV":97,"MOD":98,"%":99,"^":100,"not_opt":101,"NOT":102,"escape_opt":103,"ESCAPE":104,"predicate":105,"IN":106,"BETWEEN":107,"AND":108,"SOUNDS":109,"LIKE":110,"REGEXP":111,"comparison_operator":112,">=":113,">":114,"<=":115,"<":116,"<>":117,"!=":118,"sub_query_data_set_opt":119,"ANY":120,"boolean_primary":121,"IS":122,"boolean_extra":123,"UNKNOWN":124,"&&":125,"||":126,"OR":127,"XOR":128,"where_opt":129,"WHERE":130,"group_by_opt":131,"group_by":132,"roll_up_opt":133,"WITH":134,"ROLLUP":135,"GROUP_BY":136,"group_by_order_by_item_list":137,"order_by":138,"ORDER_BY":139,"group_by_order_by_item":140,"sort_opt":141,"ASC":142,"DESC":143,"having_opt":144,"HAVING":145,"limit":146,"LIMIT":147,"OFFSET":148,"procedure_opt":149,"procedure":150,"PROCEDURE":151,"for_update_lock_in_share_mode_opt":152,"FOR":153,"UPDATE":154,"LOCK":155,"SHARE":156,"MODE":157,"FROM":158,"table_references":159,"partitionOpt":160,"escaped_table_reference":161,"table_reference":162,"OJ":163,"join_inner_cross":164,"INNER":165,"CROSS":166,"left_right":167,"LEFT":168,"RIGHT":169,"out_opt":170,"OUTER":171,"left_right_out_opt":172,"join_table":173,"JOIN":174,"table_factor":175,"join_condition":176,"on_join_condition":177,"NATURAL":178,"join_condition_opt":179,"ON":180,"USING":181,"partition_names":182,"PARTITION":183,"aliasOpt":184,"index_or_key":185,"INDEX":186,"KEY":187,"for_opt":188,"identifier_list_opt":189,"index_hint_list_opt":190,"index_hint_list":191,"index_hint":192,"USE":193,"IGNORE":194,"FORCE":195,"$accept":0,"$end":1},
terminals_: {2:"error",6:"EOF",8:";",14:"UNION",16:"(",17:")",18:"SELECT",30:"ALL",31:"DISTINCT",32:"DISTINCTROW",33:"TOP",34:"NUMERIC",35:"HIGH_PRIORITY",36:"MAX_STATEMENT_TIME",37:"=",38:"STRAIGHT_JOIN",39:"SQL_SMALL_RESULT",40:"SQL_BIG_RESULT",41:"SQL_BUFFER_RESULT",42:"SQL_CACHE",43:"SQL_NO_CACHE",44:"SQL_CALC_FOUND_ROWS",45:",",47:"*",48:"SELECT_EXPR_STAR",51:"AS",52:"IDENTIFIER",53:"STRING",56:"EXPONENT_NUMERIC",57:"HEX_NUMERIC",59:"TRUE",60:"FALSE",62:"NULL",68:"DOT",72:"WHEN",73:"THEN",75:"ELSE",77:"CASE",78:"END",80:"+",82:"-",83:"~",84:"!",85:"BINARY",87:"ROW",88:"EXISTS",89:"{",90:"}",92:"|",93:"&",94:"<<",95:">>",96:"/",97:"DIV",98:"MOD",99:"%",100:"^",102:"NOT",104:"ESCAPE",106:"IN",107:"BETWEEN",108:"AND",109:"SOUNDS",110:"LIKE",111:"REGEXP",113:">=",114:">",115:"<=",116:"<",117:"<>",118:"!=",120:"ANY",122:"IS",124:"UNKNOWN",125:"&&",126:"||",127:"OR",128:"XOR",130:"WHERE",134:"WITH",135:"ROLLUP",136:"GROUP_BY",139:"ORDER_BY",142:"ASC",143:"DESC",145:"HAVING",147:"LIMIT",148:"OFFSET",151:"PROCEDURE",153:"FOR",154:"UPDATE",155:"LOCK",156:"SHARE",157:"MODE",158:"FROM",163:"OJ",165:"INNER",166:"CROSS",168:"LEFT",169:"RIGHT",171:"OUTER",174:"JOIN",178:"NATURAL",180:"ON",181:"USING",183:"PARTITION",186:"INDEX",187:"KEY",193:"USE",194:"IGNORE",195:"FORCE"},
productions_: [0,[3,3],[3,3],[5,1],[5,0],[7,1],[7,3],[10,4],[10,4],[13,3],[9,4],[9,4],[4,13],[15,1],[15,1],[15,1],[15,0],[19,2],[19,0],[20,1],[20,0],[21,3],[21,0],[22,1],[22,0],[23,1],[23,0],[24,1],[24,0],[25,1],[25,0],[26,0],[26,1],[26,1],[27,1],[27,0],[28,3],[28,1],[46,1],[46,1],[46,2],[50,0],[50,2],[50,1],[50,2],[50,1],[54,1],[55,1],[55,1],[55,1],[58,1],[58,1],[61,1],[63,1],[63,1],[63,1],[63,1],[64,4],[65,3],[65,1],[66,0],[66,1],[66,1],[66,2],[66,1],[67,1],[67,3],[69,1],[69,3],[70,0],[70,1],[71,4],[71,5],[74,0],[74,2],[76,5],[79,2],[79,2],[79,2],[79,2],[79,2],[81,1],[81,1],[81,1],[81,1],[81,3],[81,4],[81,3],[81,4],[81,4],[81,1],[91,1],[91,3],[91,3],[91,3],[91,3],[91,3],[91,3],[91,3],[91,3],[91,3],[91,3],[91,3],[91,3],[101,0],[101,1],[103,0],[103,2],[105,1],[105,6],[105,6],[105,6],[105,4],[105,5],[105,4],[112,1],[112,1],[112,1],[112,1],[112,1],[112,1],[112,1],[119,1],[119,1],[121,1],[121,4],[121,3],[121,6],[123,1],[123,1],[49,1],[49,4],[49,2],[49,3],[49,3],[49,3],[49,3],[49,3],[86,1],[86,3],[129,0],[129,2],[131,0],[131,1],[133,0],[133,2],[132,3],[11,0],[11,1],[138,3],[137,1],[137,3],[140,2],[141,0],[141,1],[141,1],[144,0],[144,2],[146,2],[146,4],[146,4],[12,0],[12,1],[149,0],[149,1],[150,2],[152,0],[152,2],[152,4],[29,0],[29,10],[159,1],[159,3],[161,1],[161,4],[164,0],[164,1],[164,1],[167,1],[167,1],[170,0],[170,1],[172,0],[172,2],[173,4],[173,5],[173,4],[173,6],[173,5],[179,0],[179,1],[177,2],[176,1],[176,4],[162,1],[162,1],[182,1],[182,3],[160,0],[160,4],[184,0],[184,2],[184,1],[185,1],[185,1],[188,0],[188,2],[188,2],[188,2],[189,0],[189,1],[190,0],[190,1],[191,1],[191,3],[192,6],[192,6],[192,6],[175,4],[175,4],[175,3]],
performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */) {
/* this == yyval */

var $0 = $$.length - 1;
switch (yystate) {
case 1: case 2:
 return {nodeType: 'Main', value: $$[$0-2], hasSemicolon: $$[$0-1]}; 
break;
case 3: case 145:
 this.$ = true 
break;
case 4:
 this.$ = false 
break;
case 5: case 13: case 14: case 15: case 17: case 19: case 21: case 23: case 25: case 27: case 29: case 32: case 33: case 34: case 53: case 54: case 55: case 56: case 61: case 62: case 64: case 70: case 74: case 81: case 82: case 83: case 84: case 90: case 91: case 105: case 107: case 108: case 115: case 116: case 117: case 118: case 119: case 120: case 121: case 122: case 123: case 124: case 128: case 130: case 141: case 143: case 148: case 154: case 155: case 157: case 162: case 164: case 165: case 176: case 177: case 178: case 179: case 181: case 190: case 192: case 194: case 195: case 203: case 204: case 210: case 212:
 this.$ = $$[$0] 
break;
case 6:
 this.$ = $$[$0-2], this.$.orderBy = $$[$0-1], this.$.limit = $$[$0]; 
break;
case 7: case 8:
 this.$ = { type: 'Union', left: $$[$0-3], distinctOpt: $$[$0-1], right: $$[$0] }; 
break;
case 9:
 this.$ = { type: 'SelectParenthesized', value: $$[$0-1] }; 
break;
case 10: case 11:
 this.$ = { type: 'Union', left: $$[$0-3], distinctOpt: $$[$0-1], right: $$[$0] } 
break;
case 12:

        this.$ = {
          type: 'Select',
          distinctOpt: $$[$0-11],
          topOpt: $$[$0-10],
          highPriorityOpt: $$[$0-9],
          maxStateMentTimeOpt: $$[$0-8],
          straightJoinOpt: $$[$0-7],
          sqlSmallResultOpt: $$[$0-6],
          sqlBigResultOpt: $$[$0-5],
          sqlBufferResultOpt: $$[$0-4],
          sqlCacheOpt: $$[$0-3],
          sqlCalcFoundRowsOpt: $$[$0-2],
          selectItems: $$[$0-1],
          from: $$[$0].from,
          partition: $$[$0].partition,
          where: $$[$0].where,
          groupBy: $$[$0].groupBy,
          having: $$[$0].having,
          orderBy: $$[$0].orderBy,
          limit: $$[$0].limit,
          procedure: $$[$0].procedure,
          updateLockMode: $$[$0].updateLockMode
        }
      
break;
case 16: case 18: case 20: case 22: case 24: case 26: case 28: case 30: case 31: case 35: case 60: case 69: case 73: case 104: case 106: case 140: case 142: case 144: case 147: case 153: case 156: case 161: case 163: case 166: case 175: case 180: case 189: case 198: case 205: case 209: case 211:
 this.$ = null 
break;
case 36:
 $$[$0-2].value.push($$[$0]); 
break;
case 37:
 this.$ = { type: 'SelectExpr', value: [ $$[$0] ] } 
break;
case 38: case 39: case 65:
 this.$ = { type: 'Identifier', value: $$[$0] } 
break;
case 40:
 this.$ = $$[$0-1]; this.$.alias = $$[$0].alias; this.$.hasAs = $$[$0].hasAs; 
break;
case 41: case 200:
 this.$ = {alias: null, hasAs: null} 
break;
case 42: case 44:
 this.$ = {alias: $$[$0], hasAs: true} 
break;
case 43:
 this.$ = {alias: $$[$0], hasAs: false} 
break;
case 45:
 this.$ = {alias: $$[$01], hasAs: false} 
break;
case 46:
 this.$ = { type: 'String', value: $$[$0] } 
break;
case 47: case 48: case 49:
 this.$ = { type: 'Number', value: $$[$0] } 
break;
case 50:
 this.$ = { type: 'Boolean', value: 'TRUE' } 
break;
case 51:
 this.$ = { type: 'Boolean', value: 'FALSE' } 
break;
case 52:
 this.$ = { type: 'Null', value: 'null' } 
break;
case 57:
 this.$ = {type: 'FunctionCall', name: $$[$0-3], params: $$[$0-1]} 
break;
case 58:
 $$[$0-2].push($$[$0]); this.$ = $$[$0-2]; 
break;
case 59:
 this.$ = [$$[$0]]; 
break;
case 63:
 this.$ = { type: 'FunctionCallParam', distinctOpt: $$[$0-1], value: $$[$0] } 
break;
case 66:
 this.$ = $$[$0-2]; $$[$0-2].value += '.' + $$[$0] 
break;
case 67:
 this.$ = { type: 'IdentifierList', value: [ $$[$0] ] } 
break;
case 68: case 172:
 this.$ = $$[$0-2]; $$[$0-2].value.push($$[$0]); 
break;
case 71:
 this.$ = { type: 'WhenThenList', value: [ { when: $$[$0-2], then: $$[$0] } ] }; 
break;
case 72:
 this.$ = $$[$0-4]; this.$.value.push({ when: $$[$0-2], then: $$[$0] }); 
break;
case 75:
 this.$ = { type: 'CaseWhen', caseExprOpt: $$[$0-3], whenThenList: $$[$0-2], else: $$[$0-1] } 
break;
case 76: case 77: case 78: case 79: case 80:
 this.$ = { type: 'Prefix', prefix: $$[$0-1], value: $$[$0] } 
break;
case 85:
 this.$ = { type: 'SimpleExprParentheses', value: $$[$0-1] } 
break;
case 86:
 this.$ = { type: 'SimpleExprParentheses', value: $$[$0-2], hasRow: true } 
break;
case 87:
 this.$ = { type: 'SubQuery', value: $$[$0-1] } 
break;
case 88:
 this.$ = { type: 'SubQuery', value: $$[$0-1], hasExists: true } 
break;
case 89:
 this.$ = { type: 'IdentifierExpr', identifier: $$[$0-2], value: $$[$0-1] } 
break;
case 92:
 this.$ = { type: 'BitExpression', operator: '|', left: $$[$0-2], right: $$[$0] } 
break;
case 93:
 this.$ = { type: 'BitExpression', operator: '&', left: $$[$0-2], right: $$[$0] } 
break;
case 94:
 this.$ = { type: 'BitExpression', operator: '<<', left: $$[$0-2], right: $$[$0] } 
break;
case 95:
 this.$ = { type: 'BitExpression', operator: '>>', left: $$[$0-2], right: $$[$0] } 
break;
case 96:
 this.$ = { type: 'BitExpression', operator: '+', left: $$[$0-2], right: $$[$0] } 
break;
case 97:
 this.$ = { type: 'BitExpression', operator: '-', left: $$[$0-2], right: $$[$0] } 
break;
case 98:
 this.$ = { type: 'BitExpression', operator: '*', left: $$[$0-2], right: $$[$0] } 
break;
case 99:
 this.$ = { type: 'BitExpression', operator: '/', left: $$[$0-2], right: $$[$0] } 
break;
case 100:
 this.$ = { type: 'BitExpression', operator: 'DIV', left: $$[$0-2], right: $$[$0] } 
break;
case 101:
 this.$ = { type: 'BitExpression', operator: 'MOD', left: $$[$0-2], right: $$[$0] } 
break;
case 102:
 this.$ = { type: 'BitExpression', operator: '%', left: $$[$0-2], right: $$[$0] } 
break;
case 103:
 this.$ = { type: 'BitExpression', operator: '^', left: $$[$0-2], right: $$[$0] } 
break;
case 109:
 this.$ = { type: 'InSubQueryPredicate', hasNot: $$[$0-4], left: $$[$0-5] ,right: $$[$0-1] } 
break;
case 110:
 this.$ = { type: 'InExpressionListPredicate', hasNot: $$[$0-4], left: $$[$0-5], right: $$[$0-1] } 
break;
case 111:
 this.$ = { type: 'BetweenPredicate', hasNot: $$[$0-4], left: $$[$0-5], right: { left: $$[$0-2], right: $$[$0] } } 
break;
case 112:
 this.$ = { type: 'SoundsLikePredicate', hasNot: false, left: $$[$0-3], right: $$[$0] } 
break;
case 113:
 this.$ = { type: 'LikePredicate', hasNot: $$[$0-3], left: $$[$0-4], right: $$[$0-1], escape: $$[$0] } 
break;
case 114:
 this.$ = { type: 'RegexpPredicate', hasNot: $$[$0-2], left: $$[$0-3], right: $$[$0] } 
break;
case 125:
 this.$ = { type: 'IsNullBooleanPrimary', hasNot: $$[$0-1] , value: $$[$0-3] } 
break;
case 126:
 this.$ = { type: 'ComparisonBooleanPrimary', left: $$[$0-2], operator: $$[$0-1], right: $$[$0] } 
break;
case 127:
 this.$ = { type: 'ComparisonSubQueryBooleanPrimary', operator: $$[$0-4], subQueryOpt: $$[$0-3], left: $$[$0-5], right: $$[$0-1] } 
break;
case 129:
 this.$ = { type: 'BooleanExtra', value: $$[$0] } 
break;
case 131:
 this.$ = { type: 'IsExpression', hasNot: $$[$0-1], left: $$[$0-3], right: $$[$0] } 
break;
case 132:
 this.$ = { type: 'NotExpression', value: $$[$0] } 
break;
case 133: case 136:
 this.$ = { type: 'AndExpression', operator: $$[$0-1], left: $$[$0-2], right: $$[$0] } 
break;
case 134: case 135:
 this.$ = { type: 'OrExpression', operator: $$[$0-1], left: $$[$0-2], right: $$[$0] } 
break;
case 137:
 this.$ = { type: 'XORExpression', left: $$[$0-2], right: $$[$0] } 
break;
case 138:
 this.$ = { type: 'ExpressionList', value: [ $$[$0] ] } 
break;
case 139: case 214:
 this.$ = $$[$0-2]; this.$.value.push($$[$0]); 
break;
case 146:
 this.$ = { type: 'GroupBy', value: $$[$0-1], rollUp: $$[$0] } 
break;
case 149:
 this.$ = { type: 'OrderBy', value: $$[$0-1], rollUp: $$[$0] } 
break;
case 150: case 196:
 this.$ = [ $$[$0] ] 
break;
case 151:
 this.$ = $$[$0-2]; $$[$0-2].push($$[$0]); 
break;
case 152:
 this.$ = { type: 'GroupByOrderByItem', value: $$[$0-1], sortOpt: $$[$0] } 
break;
case 158:
 this.$ = { type: 'Limit', value: [ $$[$0] ] } 
break;
case 159:
 this.$ = { type: 'Limit', value: [ $$[$0-2], $$[$0] ] } 
break;
case 160:
 this.$ = { type: 'Limit', value: [ $$[$0], $$[$0-2] ], offsetMode: true } 
break;
case 167:
 this.$ = $$[$0-1] + ' ' + $$[$0] 
break;
case 168:
 this.$ = $$[$0-3] + ' ' + $$[$0-2] + ' ' + $$[$0-1] + ' ' + $$[$0] 
break;
case 169:
 this.$ = {} 
break;
case 170:
 this.$ = { from: $$[$0-8], partition: $$[$0-7], where: $$[$0-6], groupBy: $$[$0-5], having: $$[$0-4], orderBy: $$[$0-3], limit: $$[$0-2], procedure: $$[$0-1], updateLockMode: $$[$0] } 
break;
case 171:
 this.$ = { type: 'TableReferences', value: [ $$[$0] ] } 
break;
case 173:
 this.$ = { type: 'TableReference', value: $$[$0] } 
break;
case 174:
 this.$ = { type: 'TableReference', hasOj: true, value: $$[$0-1] } 
break;
case 182:
 this.$ = { leftRight: null, outOpt: null } 
break;
case 183:
 this.$ = { leftRight: $$[$0-1], outOpt: $$[$0] } 
break;
case 184:
 this.$ = { type: 'InnerCrossJoinTable', innerCrossOpt: $$[$0-2], left: $$[$0-3], right: $$[$0], condition: null } 
break;
case 185:
 this.$ = { type: 'InnerCrossJoinTable', innerCrossOpt: $$[$0-3], left: $$[$0-4], right: $$[$0-1], condition: $$[$0] } 
break;
case 186:
 this.$ = { type: 'StraightJoinTable', left: $$[$0-3], right: $$[$0-1], condition: $$[$0] } 
break;
case 187:
 this.$ = { type: 'LeftRightJoinTable', leftRight: $$[$0-4], outOpt: $$[$0-3], left: $$[$0-5], right: $$[$0-1], condition: $$[$0] } 
break;
case 188:
 this.$ = { type: 'NaturalJoinTable', leftRight: $$[$0-2].leftRight, outOpt: $$[$0-2].outOpt, left: $$[$0-4], right: $$[$0] } 
break;
case 191:
 this.$ = { type: 'OnJoinCondition', value: $$[$0] } 
break;
case 193:
 this.$ = { type: 'UsingJoinCondition', value: $$[$0-1] } 
break;
case 197:
 this.$ = $$[$0-2]; $$[$0-2].push($$[$0]) 
break;
case 199:
 this.$ = { type: 'Partitions', value: $$[$0-1] } 
break;
case 201:
 this.$ = { hasAs: true, alias: $$[$0] } 
break;
case 202:
 this.$ = { hasAs: false, alias: $$[$0] } 
break;
case 206: case 207: case 208:
 this.$ = { type: 'ForOptIndexHint', value: $$[$0] } 
break;
case 213:
 this.$ = { type: 'IndexHintList', value: [ $$[$0] ] } 
break;
case 215:
 this.$ = { type: 'UseIndexHint', value: $$[$0-1], forOpt: $$[$0-3], indexOrKey: $$[$0-4] } 
break;
case 216:
 this.$ = { type: 'IgnoreIndexHint', value: $$[$0-1], forOpt: $$[$0-3], indexOrKey: $$[$0-4] } 
break;
case 217:
 this.$ = { type: 'ForceIndexHint', value: $$[$0-1], forOpt: $$[$0-3], indexOrKey: $$[$0-4] } 
break;
case 218:
 this.$ = { type: 'TableFactor', value: $$[$0-3], partition: $$[$0-2], alias: $$[$0-1].alias, hasAs: $$[$0-1].hasAs, indexHintOpt: $$[$0] } 
break;
case 219:
 this.$ = { type: 'TableFactor', value: { type: 'SubQuery', value: $$[$0-2] }, alias: $$[$0].alias, hasAs: $$[$0].hasAs} 
break;
case 220:
 this.$ = $$[$0-1]; this.$.hasParentheses = true 
break;
}
},
table: [{3:1,4:2,7:3,9:5,10:6,13:7,16:$V0,18:$V1},{1:[3]},{5:9,6:$V2,8:$V3,14:$V4},{5:12,6:$V2,8:$V3},o([16,33,34,35,36,38,39,40,41,42,43,44,47,48,52,53,56,57,59,60,62,77,80,82,83,84,85,87,88,89,102],$V5,{15:13,30:$V6,31:$V7,32:$V8}),o($V9,[2,5]),o([6,8,147],$Va,{11:17,138:18,139:$Vb}),{14:$Vc},{4:21,18:$V1},{6:[1,22]},{15:23,18:$V5,30:$V6,31:$V7,32:$V8},{6:[2,3]},{6:[1,24]},o($Vd,[2,18],{19:25,33:[1,26]}),o($Ve,[2,13]),o($Ve,[2,14]),o($Ve,[2,15]),o($V9,$Vf,{12:27,146:28,147:$Vg}),o($Vh,[2,148]),{16:$Vi,34:$Vj,49:32,52:$Vk,53:$Vl,54:47,55:48,56:$Vm,57:$Vn,58:49,59:$Vo,60:$Vp,61:50,62:$Vq,63:38,64:40,67:39,76:46,77:$Vr,79:41,80:$Vs,81:37,82:$Vt,83:$Vu,84:$Vv,85:$Vw,87:$Vx,88:$Vy,89:$Vz,91:36,102:$VA,105:35,121:33,137:30,140:31},{15:65,16:$V5,30:$V6,31:$V7,32:$V8},{17:[1,66]},{1:[2,1]},{4:67,9:68,18:$V1},{1:[2,2]},o($VB,[2,20],{20:69,35:[1,70]}),{34:[1,71]},o($V9,[2,6]),o($VC,[2,162]),{34:[1,72]},o($Vh,$VD,{133:73,45:$VE,134:$VF}),o($VG,[2,150]),o($VG,[2,153],{141:76,108:$VH,125:$VI,126:$VJ,127:$VK,128:$VL,142:[1,82],143:[1,83]}),o($VM,[2,130],{112:85,37:[1,86],113:[1,87],114:[1,88],115:[1,89],116:[1,90],117:[1,91],118:[1,92],122:[1,84]}),{16:$Vi,34:$Vj,49:93,52:$Vk,53:$Vl,54:47,55:48,56:$Vm,57:$Vn,58:49,59:$Vo,60:$Vp,61:50,62:$Vq,63:38,64:40,67:39,76:46,77:$Vr,79:41,80:$Vs,81:37,82:$Vt,83:$Vu,84:$Vv,85:$Vw,87:$Vx,88:$Vy,89:$Vz,91:36,102:$VA,105:35,121:33},o($VN,[2,124]),o($VN,[2,108],{101:94,47:$VO,80:$VP,82:$VQ,92:$VR,93:$VS,94:$VT,95:$VU,96:$VV,97:$VW,98:$VX,99:$VY,100:$VZ,102:$V_,106:$V$,107:$V$,110:$V$,111:$V$,109:[1,95]}),o($V01,[2,91]),o($V11,[2,81]),o($V11,[2,82],{68:$V21}),o($V11,[2,83]),o($V11,[2,84]),{4:111,16:$Vi,18:$V1,34:$Vj,49:112,52:$Vk,53:$Vl,54:47,55:48,56:$Vm,57:$Vn,58:49,59:$Vo,60:$Vp,61:50,62:$Vq,63:38,64:40,67:39,76:46,77:$Vr,79:41,80:$Vs,81:37,82:$Vt,83:$Vu,84:$Vv,85:$Vw,86:110,87:$Vx,88:$Vy,89:$Vz,91:36,102:$VA,105:35,121:33},{16:[1,113]},{16:[1,114]},{52:$V31,67:115},o($V11,[2,90]),o($V11,[2,53]),o($V11,[2,54]),o($V11,[2,55]),o($V11,[2,56]),o([6,8,14,17,37,38,45,47,51,52,53,68,72,73,75,78,80,82,90,92,93,94,95,96,97,98,99,100,102,104,106,107,108,109,110,111,113,114,115,116,117,118,122,125,126,127,128,130,134,136,139,142,143,145,147,151,153,155,158,165,166,168,169,174,178,180,181,183],$V41,{16:$V51}),{16:$Vi,34:$Vj,52:$Vk,53:$Vl,54:47,55:48,56:$Vm,57:$Vn,58:49,59:$Vo,60:$Vp,61:50,62:$Vq,63:38,64:40,67:39,76:46,77:$Vr,79:41,80:$Vs,81:118,82:$Vt,83:$Vu,84:$Vv,85:$Vw,87:$Vx,88:$Vy,89:$Vz},{16:$Vi,34:$Vj,52:$Vk,53:$Vl,54:47,55:48,56:$Vm,57:$Vn,58:49,59:$Vo,60:$Vp,61:50,62:$Vq,63:38,64:40,67:39,76:46,77:$Vr,79:41,80:$Vs,81:119,82:$Vt,83:$Vu,84:$Vv,85:$Vw,87:$Vx,88:$Vy,89:$Vz},{16:$Vi,34:$Vj,52:$Vk,53:$Vl,54:47,55:48,56:$Vm,57:$Vn,58:49,59:$Vo,60:$Vp,61:50,62:$Vq,63:38,64:40,67:39,76:46,77:$Vr,79:41,80:$Vs,81:120,82:$Vt,83:$Vu,84:$Vv,85:$Vw,87:$Vx,88:$Vy,89:$Vz},{16:$Vi,34:$Vj,52:$Vk,53:$Vl,54:47,55:48,56:$Vm,57:$Vn,58:49,59:$Vo,60:$Vp,61:50,62:$Vq,63:38,64:40,67:39,76:46,77:$Vr,79:41,80:$Vs,81:121,82:$Vt,83:$Vu,84:$Vv,85:$Vw,87:$Vx,88:$Vy,89:$Vz},{16:$Vi,34:$Vj,52:$Vk,53:$Vl,54:47,55:48,56:$Vm,57:$Vn,58:49,59:$Vo,60:$Vp,61:50,62:$Vq,63:38,64:40,67:39,76:46,77:$Vr,79:41,80:$Vs,81:122,82:$Vt,83:$Vu,84:$Vv,85:$Vw,87:$Vx,88:$Vy,89:$Vz},{16:$Vi,34:$Vj,49:124,52:$Vk,53:$Vl,54:47,55:48,56:$Vm,57:$Vn,58:49,59:$Vo,60:$Vp,61:50,62:$Vq,63:38,64:40,67:39,70:123,72:[2,69],76:46,77:$Vr,79:41,80:$Vs,81:37,82:$Vt,83:$Vu,84:$Vv,85:$Vw,87:$Vx,88:$Vy,89:$Vz,91:36,102:$VA,105:35,121:33},o($V11,[2,46]),o($V11,[2,47]),o($V11,[2,48]),o($V11,[2,49]),o($V11,[2,50]),o($V11,[2,51]),o($V11,[2,52]),{10:126,13:125,16:$V0},o([6,8,14,139,147],[2,9]),o($V9,[2,10],{14:$V4}),o($V9,[2,11]),o($V61,[2,22],{21:127,36:[1,128]}),o($VB,[2,19]),o($Vd,[2,17]),o($VC,[2,158],{45:[1,129],148:[1,130]}),o($Vh,[2,149]),{16:$Vi,34:$Vj,49:32,52:$Vk,53:$Vl,54:47,55:48,56:$Vm,57:$Vn,58:49,59:$Vo,60:$Vp,61:50,62:$Vq,63:38,64:40,67:39,76:46,77:$Vr,79:41,80:$Vs,81:37,82:$Vt,83:$Vu,84:$Vv,85:$Vw,87:$Vx,88:$Vy,89:$Vz,91:36,102:$VA,105:35,121:33,140:131},{135:[1,132]},o($VG,[2,152]),{16:$Vi,34:$Vj,49:133,52:$Vk,53:$Vl,54:47,55:48,56:$Vm,57:$Vn,58:49,59:$Vo,60:$Vp,61:50,62:$Vq,63:38,64:40,67:39,76:46,77:$Vr,79:41,80:$Vs,81:37,82:$Vt,83:$Vu,84:$Vv,85:$Vw,87:$Vx,88:$Vy,89:$Vz,91:36,102:$VA,105:35,121:33},{16:$Vi,34:$Vj,49:134,52:$Vk,53:$Vl,54:47,55:48,56:$Vm,57:$Vn,58:49,59:$Vo,60:$Vp,61:50,62:$Vq,63:38,64:40,67:39,76:46,77:$Vr,79:41,80:$Vs,81:37,82:$Vt,83:$Vu,84:$Vv,85:$Vw,87:$Vx,88:$Vy,89:$Vz,91:36,102:$VA,105:35,121:33},{16:$Vi,34:$Vj,49:135,52:$Vk,53:$Vl,54:47,55:48,56:$Vm,57:$Vn,58:49,59:$Vo,60:$Vp,61:50,62:$Vq,63:38,64:40,67:39,76:46,77:$Vr,79:41,80:$Vs,81:37,82:$Vt,83:$Vu,84:$Vv,85:$Vw,87:$Vx,88:$Vy,89:$Vz,91:36,102:$VA,105:35,121:33},{16:$Vi,34:$Vj,49:136,52:$Vk,53:$Vl,54:47,55:48,56:$Vm,57:$Vn,58:49,59:$Vo,60:$Vp,61:50,62:$Vq,63:38,64:40,67:39,76:46,77:$Vr,79:41,80:$Vs,81:37,82:$Vt,83:$Vu,84:$Vv,85:$Vw,87:$Vx,88:$Vy,89:$Vz,91:36,102:$VA,105:35,121:33},{16:$Vi,34:$Vj,49:137,52:$Vk,53:$Vl,54:47,55:48,56:$Vm,57:$Vn,58:49,59:$Vo,60:$Vp,61:50,62:$Vq,63:38,64:40,67:39,76:46,77:$Vr,79:41,80:$Vs,81:37,82:$Vt,83:$Vu,84:$Vv,85:$Vw,87:$Vx,88:$Vy,89:$Vz,91:36,102:$VA,105:35,121:33},o($VG,[2,154]),o($VG,[2,155]),o([59,60,62,124],$V$,{101:138,102:$V_}),{16:$Vi,30:[1,141],34:$Vj,52:$Vk,53:$Vl,54:47,55:48,56:$Vm,57:$Vn,58:49,59:$Vo,60:$Vp,61:50,62:$Vq,63:38,64:40,67:39,76:46,77:$Vr,79:41,80:$Vs,81:37,82:$Vt,83:$Vu,84:$Vv,85:$Vw,87:$Vx,88:$Vy,89:$Vz,91:36,105:139,119:140,120:[1,142]},o($V71,[2,115]),o($V71,[2,116]),o($V71,[2,117]),o($V71,[2,118]),o($V71,[2,119]),o($V71,[2,120]),o($V71,[2,121]),o($VM,[2,132]),{106:[1,143],107:[1,144],110:[1,145],111:[1,146]},{110:[1,147]},{16:$Vi,34:$Vj,52:$Vk,53:$Vl,54:47,55:48,56:$Vm,57:$Vn,58:49,59:$Vo,60:$Vp,61:50,62:$Vq,63:38,64:40,67:39,76:46,77:$Vr,79:41,80:$Vs,81:37,82:$Vt,83:$Vu,84:$Vv,85:$Vw,87:$Vx,88:$Vy,89:$Vz,91:148},{16:$Vi,34:$Vj,52:$Vk,53:$Vl,54:47,55:48,56:$Vm,57:$Vn,58:49,59:$Vo,60:$Vp,61:50,62:$Vq,63:38,64:40,67:39,76:46,77:$Vr,79:41,80:$Vs,81:37,82:$Vt,83:$Vu,84:$Vv,85:$Vw,87:$Vx,88:$Vy,89:$Vz,91:149},{16:$Vi,34:$Vj,52:$Vk,53:$Vl,54:47,55:48,56:$Vm,57:$Vn,58:49,59:$Vo,60:$Vp,61:50,62:$Vq,63:38,64:40,67:39,76:46,77:$Vr,79:41,80:$Vs,81:37,82:$Vt,83:$Vu,84:$Vv,85:$Vw,87:$Vx,88:$Vy,89:$Vz,91:150},{16:$Vi,34:$Vj,52:$Vk,53:$Vl,54:47,55:48,56:$Vm,57:$Vn,58:49,59:$Vo,60:$Vp,61:50,62:$Vq,63:38,64:40,67:39,76:46,77:$Vr,79:41,80:$Vs,81:37,82:$Vt,83:$Vu,84:$Vv,85:$Vw,87:$Vx,88:$Vy,89:$Vz,91:151},{16:$Vi,34:$Vj,52:$Vk,53:$Vl,54:47,55:48,56:$Vm,57:$Vn,58:49,59:$Vo,60:$Vp,61:50,62:$Vq,63:38,64:40,67:39,76:46,77:$Vr,79:41,80:$Vs,81:37,82:$Vt,83:$Vu,84:$Vv,85:$Vw,87:$Vx,88:$Vy,89:$Vz,91:152},{16:$Vi,34:$Vj,52:$Vk,53:$Vl,54:47,55:48,56:$Vm,57:$Vn,58:49,59:$Vo,60:$Vp,61:50,62:$Vq,63:38,64:40,67:39,76:46,77:$Vr,79:41,80:$Vs,81:37,82:$Vt,83:$Vu,84:$Vv,85:$Vw,87:$Vx,88:$Vy,89:$Vz,91:153},{16:$Vi,34:$Vj,52:$Vk,53:$Vl,54:47,55:48,56:$Vm,57:$Vn,58:49,59:$Vo,60:$Vp,61:50,62:$Vq,63:38,64:40,67:39,76:46,77:$Vr,79:41,80:$Vs,81:37,82:$Vt,83:$Vu,84:$Vv,85:$Vw,87:$Vx,88:$Vy,89:$Vz,91:154},{16:$Vi,34:$Vj,52:$Vk,53:$Vl,54:47,55:48,56:$Vm,57:$Vn,58:49,59:$Vo,60:$Vp,61:50,62:$Vq,63:38,64:40,67:39,76:46,77:$Vr,79:41,80:$Vs,81:37,82:$Vt,83:$Vu,84:$Vv,85:$Vw,87:$Vx,88:$Vy,89:$Vz,91:155},{16:$Vi,34:$Vj,52:$Vk,53:$Vl,54:47,55:48,56:$Vm,57:$Vn,58:49,59:$Vo,60:$Vp,61:50,62:$Vq,63:38,64:40,67:39,76:46,77:$Vr,79:41,80:$Vs,81:37,82:$Vt,83:$Vu,84:$Vv,85:$Vw,87:$Vx,88:$Vy,89:$Vz,91:156},{16:$Vi,34:$Vj,52:$Vk,53:$Vl,54:47,55:48,56:$Vm,57:$Vn,58:49,59:$Vo,60:$Vp,61:50,62:$Vq,63:38,64:40,67:39,76:46,77:$Vr,79:41,80:$Vs,81:37,82:$Vt,83:$Vu,84:$Vv,85:$Vw,87:$Vx,88:$Vy,89:$Vz,91:157},{16:$Vi,34:$Vj,52:$Vk,53:$Vl,54:47,55:48,56:$Vm,57:$Vn,58:49,59:$Vo,60:$Vp,61:50,62:$Vq,63:38,64:40,67:39,76:46,77:$Vr,79:41,80:$Vs,81:37,82:$Vt,83:$Vu,84:$Vv,85:$Vw,87:$Vx,88:$Vy,89:$Vz,91:158},{16:$Vi,34:$Vj,52:$Vk,53:$Vl,54:47,55:48,56:$Vm,57:$Vn,58:49,59:$Vo,60:$Vp,61:50,62:$Vq,63:38,64:40,67:39,76:46,77:$Vr,79:41,80:$Vs,81:37,82:$Vt,83:$Vu,84:$Vv,85:$Vw,87:$Vx,88:$Vy,89:$Vz,91:159},o([59,60,62,106,107,110,111,124],[2,105]),{52:[1,160]},{17:[1,161],45:$V81},{17:[1,163]},o($V91,[2,138],{108:$VH,125:$VI,126:$VJ,127:$VK,128:$VL}),{16:$Vi,34:$Vj,49:112,52:$Vk,53:$Vl,54:47,55:48,56:$Vm,57:$Vn,58:49,59:$Vo,60:$Vp,61:50,62:$Vq,63:38,64:40,67:39,76:46,77:$Vr,79:41,80:$Vs,81:37,82:$Vt,83:$Vu,84:$Vv,85:$Vw,86:164,87:$Vx,88:$Vy,89:$Vz,91:36,102:$VA,105:35,121:33},{4:165,18:$V1},{16:$Vi,34:$Vj,49:166,52:$Vk,53:$Vl,54:47,55:48,56:$Vm,57:$Vn,58:49,59:$Vo,60:$Vp,61:50,62:$Vq,63:38,64:40,67:39,68:$V21,76:46,77:$Vr,79:41,80:$Vs,81:37,82:$Vt,83:$Vu,84:$Vv,85:$Vw,87:$Vx,88:$Vy,89:$Vz,91:36,102:$VA,105:35,121:33},o([6,8,14,16,17,34,38,45,51,52,53,56,57,59,60,62,68,77,80,82,83,84,85,87,88,89,90,102,130,136,139,145,147,151,153,155,165,166,168,169,174,178,180,181,183,193,194,195],$V41),o($V91,$Va1,{121:33,105:35,91:36,81:37,63:38,67:39,64:40,79:41,76:46,54:47,55:48,58:49,61:50,65:167,66:168,49:172,16:$Vi,31:$Vb1,34:$Vj,47:$Vc1,48:$Vd1,52:$Vk,53:$Vl,56:$Vm,57:$Vn,59:$Vo,60:$Vp,62:$Vq,77:$Vr,80:$Vs,82:$Vt,83:$Vu,84:$Vv,85:$Vw,87:$Vx,88:$Vy,89:$Vz,102:$VA}),o($V11,[2,76]),o($V11,[2,77]),o($V11,[2,78]),o($V11,[2,79]),o($V11,[2,80]),{71:173,72:[1,174]},{72:[2,70],108:$VH,125:$VI,126:$VJ,127:$VK,128:$VL},o($Ve1,[2,7],{14:$Vc}),o($Ve1,[2,8]),o($Vf1,[2,24],{22:175,38:[1,176]}),{37:[1,177]},{34:[1,178]},{34:[1,179]},o($VG,[2,151]),o($Vg1,[2,145]),o($VM,[2,133]),o($Vh1,[2,134],{108:$VH,125:$VI}),o($Vh1,[2,135],{108:$VH,125:$VI}),o($VM,[2,136]),o($Vh1,[2,137],{108:$VH,125:$VI}),{58:182,59:$Vo,60:$Vp,62:[1,181],123:180,124:[1,183]},o($VN,[2,126]),{16:[1,184]},{16:[2,122]},{16:[2,123]},{16:[1,185]},{16:$Vi,34:$Vj,52:$Vk,53:$Vl,54:47,55:48,56:$Vm,57:$Vn,58:49,59:$Vo,60:$Vp,61:50,62:$Vq,63:38,64:40,67:39,76:46,77:$Vr,79:41,80:$Vs,81:37,82:$Vt,83:$Vu,84:$Vv,85:$Vw,87:$Vx,88:$Vy,89:$Vz,91:186},{16:$Vi,34:$Vj,52:$Vk,53:$Vl,54:47,55:48,56:$Vm,57:$Vn,58:49,59:$Vo,60:$Vp,61:50,62:$Vq,63:38,64:40,67:39,76:46,77:$Vr,79:41,80:$Vs,81:187,82:$Vt,83:$Vu,84:$Vv,85:$Vw,87:$Vx,88:$Vy,89:$Vz},{16:$Vi,34:$Vj,52:$Vk,53:$Vl,54:47,55:48,56:$Vm,57:$Vn,58:49,59:$Vo,60:$Vp,61:50,62:$Vq,63:38,64:40,67:39,76:46,77:$Vr,79:41,80:$Vs,81:37,82:$Vt,83:$Vu,84:$Vv,85:$Vw,87:$Vx,88:$Vy,89:$Vz,91:188},{16:$Vi,34:$Vj,52:$Vk,53:$Vl,54:47,55:48,56:$Vm,57:$Vn,58:49,59:$Vo,60:$Vp,61:50,62:$Vq,63:38,64:40,67:39,76:46,77:$Vr,79:41,80:$Vs,81:37,82:$Vt,83:$Vu,84:$Vv,85:$Vw,87:$Vx,88:$Vy,89:$Vz,91:189},o([6,8,14,17,37,38,45,51,52,53,72,73,75,78,90,92,102,106,107,108,109,110,111,113,114,115,116,117,118,122,125,126,127,128,130,134,136,139,142,143,145,147,151,153,155,158,165,166,168,169,174,178,180,181,183],[2,92],{47:$VO,80:$VP,82:$VQ,93:$VS,94:$VT,95:$VU,96:$VV,97:$VW,98:$VX,99:$VY,100:$VZ}),o([6,8,14,17,37,38,45,51,52,53,72,73,75,78,90,92,93,100,102,106,107,108,109,110,111,113,114,115,116,117,118,122,125,126,127,128,130,134,136,139,142,143,145,147,151,153,155,158,165,166,168,169,174,178,180,181,183],[2,93],{47:$VO,80:$VP,82:$VQ,94:$VT,95:$VU,96:$VV,97:$VW,98:$VX,99:$VY}),o($Vi1,[2,94],{47:$VO,80:$VP,82:$VQ,96:$VV,97:$VW,98:$VX,99:$VY}),o($Vi1,[2,95],{47:$VO,80:$VP,82:$VQ,96:$VV,97:$VW,98:$VX,99:$VY}),o($Vj1,[2,96],{47:$VO,96:$VV,97:$VW,98:$VX,99:$VY}),o($Vj1,[2,97],{47:$VO,96:$VV,97:$VW,98:$VX,99:$VY}),o($V01,[2,98]),o($V01,[2,99]),o($V01,[2,100]),o($V01,[2,101]),o($V01,[2,102]),o([6,8,14,17,37,38,45,51,52,53,72,73,75,78,90,92,100,102,106,107,108,109,110,111,113,114,115,116,117,118,122,125,126,127,128,130,134,136,139,142,143,145,147,151,153,155,158,165,166,168,169,174,178,180,181,183],[2,103],{47:$VO,80:$VP,82:$VQ,93:$VS,94:$VT,95:$VU,96:$VV,97:$VW,98:$VX,99:$VY}),o([6,8,14,16,17,34,37,38,45,47,51,52,53,56,57,59,60,62,68,72,73,75,77,78,80,82,83,84,85,87,88,89,90,92,93,94,95,96,97,98,99,100,102,104,106,107,108,109,110,111,113,114,115,116,117,118,122,125,126,127,128,130,134,136,139,142,143,145,147,151,153,155,158,165,166,168,169,174,178,180,181,183,193,194,195],[2,66]),o($V11,[2,85]),{16:$Vi,34:$Vj,49:190,52:$Vk,53:$Vl,54:47,55:48,56:$Vm,57:$Vn,58:49,59:$Vo,60:$Vp,61:50,62:$Vq,63:38,64:40,67:39,76:46,77:$Vr,79:41,80:$Vs,81:37,82:$Vt,83:$Vu,84:$Vv,85:$Vw,87:$Vx,88:$Vy,89:$Vz,91:36,102:$VA,105:35,121:33},o($V11,[2,87]),{17:[1,191],45:$V81},{17:[1,192]},{90:[1,193],108:$VH,125:$VI,126:$VJ,127:$VK,128:$VL},{17:[1,194],45:[1,195]},o($V91,[2,59]),o($V91,[2,61]),o($V91,[2,62]),{16:$Vi,34:$Vj,49:196,52:$Vk,53:$Vl,54:47,55:48,56:$Vm,57:$Vn,58:49,59:$Vo,60:$Vp,61:50,62:$Vq,63:38,64:40,67:39,76:46,77:$Vr,79:41,80:$Vs,81:37,82:$Vt,83:$Vu,84:$Vv,85:$Vw,87:$Vx,88:$Vy,89:$Vz,91:36,102:$VA,105:35,121:33},o($V91,[2,64],{108:$VH,125:$VI,126:$VJ,127:$VK,128:$VL}),{72:[1,198],74:197,75:[1,199],78:[2,73]},{16:$Vi,34:$Vj,49:200,52:$Vk,53:$Vl,54:47,55:48,56:$Vm,57:$Vn,58:49,59:$Vo,60:$Vp,61:50,62:$Vq,63:38,64:40,67:39,76:46,77:$Vr,79:41,80:$Vs,81:37,82:$Vt,83:$Vu,84:$Vv,85:$Vw,87:$Vx,88:$Vy,89:$Vz,91:36,102:$VA,105:35,121:33},o($Vk1,[2,26],{23:201,39:[1,202]}),o($Vf1,[2,23]),{34:[1,203]},o($VC,[2,159]),o($VC,[2,160]),o($VM,[2,131]),o($VN,[2,125]),o($VM,[2,128]),o($VM,[2,129]),{4:204,18:$V1},{4:205,16:$Vi,18:$V1,34:$Vj,49:112,52:$Vk,53:$Vl,54:47,55:48,56:$Vm,57:$Vn,58:49,59:$Vo,60:$Vp,61:50,62:$Vq,63:38,64:40,67:39,76:46,77:$Vr,79:41,80:$Vs,81:37,82:$Vt,83:$Vu,84:$Vv,85:$Vw,86:206,87:$Vx,88:$Vy,89:$Vz,91:36,102:$VA,105:35,121:33},{47:$VO,80:$VP,82:$VQ,92:$VR,93:$VS,94:$VT,95:$VU,96:$VV,97:$VW,98:$VX,99:$VY,100:$VZ,108:[1,207]},o($VN,[2,106],{103:208,104:[1,209]}),o($VN,[2,114],{47:$VO,80:$VP,82:$VQ,92:$VR,93:$VS,94:$VT,95:$VU,96:$VV,97:$VW,98:$VX,99:$VY,100:$VZ}),o($VN,[2,112],{47:$VO,80:$VP,82:$VQ,92:$VR,93:$VS,94:$VT,95:$VU,96:$VV,97:$VW,98:$VX,99:$VY,100:$VZ}),o($V91,[2,139],{108:$VH,125:$VI,126:$VJ,127:$VK,128:$VL}),o($V11,[2,86]),o($V11,[2,88]),o($V11,[2,89]),o($V11,[2,57]),o($V91,$Va1,{121:33,105:35,91:36,81:37,63:38,67:39,64:40,79:41,76:46,54:47,55:48,58:49,61:50,49:172,66:210,16:$Vi,31:$Vb1,34:$Vj,47:$Vc1,48:$Vd1,52:$Vk,53:$Vl,56:$Vm,57:$Vn,59:$Vo,60:$Vp,62:$Vq,77:$Vr,80:$Vs,82:$Vt,83:$Vu,84:$Vv,85:$Vw,87:$Vx,88:$Vy,89:$Vz,102:$VA}),o($V91,[2,63],{108:$VH,125:$VI,126:$VJ,127:$VK,128:$VL}),{78:[1,211]},{16:$Vi,34:$Vj,49:212,52:$Vk,53:$Vl,54:47,55:48,56:$Vm,57:$Vn,58:49,59:$Vo,60:$Vp,61:50,62:$Vq,63:38,64:40,67:39,76:46,77:$Vr,79:41,80:$Vs,81:37,82:$Vt,83:$Vu,84:$Vv,85:$Vw,87:$Vx,88:$Vy,89:$Vz,91:36,102:$VA,105:35,121:33},{16:$Vi,34:$Vj,49:213,52:$Vk,53:$Vl,54:47,55:48,56:$Vm,57:$Vn,58:49,59:$Vo,60:$Vp,61:50,62:$Vq,63:38,64:40,67:39,76:46,77:$Vr,79:41,80:$Vs,81:37,82:$Vt,83:$Vu,84:$Vv,85:$Vw,87:$Vx,88:$Vy,89:$Vz,91:36,102:$VA,105:35,121:33},{73:[1,214],108:$VH,125:$VI,126:$VJ,127:$VK,128:$VL},o($Vl1,[2,28],{24:215,40:[1,216]}),o($Vk1,[2,25]),o($V61,[2,21]),{17:[1,217]},{17:[1,218]},{17:[1,219],45:$V81},{16:$Vi,34:$Vj,52:$Vk,53:$Vl,54:47,55:48,56:$Vm,57:$Vn,58:49,59:$Vo,60:$Vp,61:50,62:$Vq,63:38,64:40,67:39,76:46,77:$Vr,79:41,80:$Vs,81:37,82:$Vt,83:$Vu,84:$Vv,85:$Vw,87:$Vx,88:$Vy,89:$Vz,91:36,105:220},o($VN,[2,113]),{16:$Vi,34:$Vj,52:$Vk,53:$Vl,54:47,55:48,56:$Vm,57:$Vn,58:49,59:$Vo,60:$Vp,61:50,62:$Vq,63:38,64:40,67:39,76:46,77:$Vr,79:41,80:$Vs,81:221,82:$Vt,83:$Vu,84:$Vv,85:$Vw,87:$Vx,88:$Vy,89:$Vz},o($V91,[2,58]),o($V11,[2,75]),{73:[1,222],108:$VH,125:$VI,126:$VJ,127:$VK,128:$VL},{78:[2,74],108:$VH,125:$VI,126:$VJ,127:$VK,128:$VL},{16:$Vi,34:$Vj,49:223,52:$Vk,53:$Vl,54:47,55:48,56:$Vm,57:$Vn,58:49,59:$Vo,60:$Vp,61:50,62:$Vq,63:38,64:40,67:39,76:46,77:$Vr,79:41,80:$Vs,81:37,82:$Vt,83:$Vu,84:$Vv,85:$Vw,87:$Vx,88:$Vy,89:$Vz,91:36,102:$VA,105:35,121:33},o($Vm1,[2,30],{25:224,41:[1,225]}),o($Vl1,[2,27]),o($VN,[2,127]),o($VN,[2,109]),o($VN,[2,110]),o($VN,[2,111]),o($VN,[2,107]),{16:$Vi,34:$Vj,49:226,52:$Vk,53:$Vl,54:47,55:48,56:$Vm,57:$Vn,58:49,59:$Vo,60:$Vp,61:50,62:$Vq,63:38,64:40,67:39,76:46,77:$Vr,79:41,80:$Vs,81:37,82:$Vt,83:$Vu,84:$Vv,85:$Vw,87:$Vx,88:$Vy,89:$Vz,91:36,102:$VA,105:35,121:33},o($Vn1,[2,71],{108:$VH,125:$VI,126:$VJ,127:$VK,128:$VL}),o($Vo1,[2,31],{26:227,42:[1,228],43:[1,229]}),o($Vm1,[2,29]),o($Vn1,[2,72],{108:$VH,125:$VI,126:$VJ,127:$VK,128:$VL}),o($Vp1,[2,35],{27:230,44:[1,231]}),o($Vo1,[2,32]),o($Vo1,[2,33]),{16:$Vi,28:232,34:$Vj,46:233,47:$Vq1,48:$Vr1,49:236,52:$Vk,53:$Vl,54:47,55:48,56:$Vm,57:$Vn,58:49,59:$Vo,60:$Vp,61:50,62:$Vq,63:38,64:40,67:39,76:46,77:$Vr,79:41,80:$Vs,81:37,82:$Vt,83:$Vu,84:$Vv,85:$Vw,87:$Vx,88:$Vy,89:$Vz,91:36,102:$VA,105:35,121:33},o($Vp1,[2,34]),o($Vs1,[2,169],{29:237,45:[1,238],158:[1,239]}),o($Vt1,[2,37]),o($Vt1,[2,38]),o($Vt1,[2,39]),o($Vt1,[2,41],{50:240,51:[1,241],52:[1,242],53:[1,243],108:$VH,125:$VI,126:$VJ,127:$VK,128:$VL}),o($Vs1,[2,12]),{16:$Vi,34:$Vj,46:244,47:$Vq1,48:$Vr1,49:236,52:$Vk,53:$Vl,54:47,55:48,56:$Vm,57:$Vn,58:49,59:$Vo,60:$Vp,61:50,62:$Vq,63:38,64:40,67:39,76:46,77:$Vr,79:41,80:$Vs,81:37,82:$Vt,83:$Vu,84:$Vv,85:$Vw,87:$Vx,88:$Vy,89:$Vz,91:36,102:$VA,105:35,121:33},{16:$Vu1,52:$V31,67:251,89:$Vv1,159:245,161:246,162:247,173:250,175:249},o($Vt1,[2,40]),{52:[1,253],53:[1,254]},o($Vt1,[2,43]),o($Vt1,[2,45]),o($Vt1,[2,36]),o([6,8,14,17,130,136,139,145,147,151,153,155],$Vw1,{160:255,45:$Vx1,183:$Vy1}),o($Vz1,[2,171]),o($Vz1,[2,173],{164:258,167:260,38:$VA1,165:$VB1,166:$VC1,168:$VD1,169:$VE1,174:$VF1,178:$VG1}),{163:[1,266]},o($VH1,[2,194]),o($VH1,[2,195]),o([6,8,14,17,38,45,51,52,90,130,136,139,145,147,151,153,155,165,166,168,169,174,178,180,181,193,194,195],$Vw1,{160:267,68:$V21,183:$Vy1}),{4:268,16:$Vu1,18:$V1,52:$V31,67:251,89:$Vv1,159:269,161:246,162:247,173:250,175:249},o($Vt1,[2,42]),o($Vt1,[2,44]),o($VI1,[2,140],{129:270,130:[1,271]}),{16:$Vu1,52:$V31,67:251,89:$Vv1,161:272,162:247,173:250,175:249},{16:[1,273]},{174:[1,274]},{16:$Vu1,52:$V31,67:251,175:275},{170:276,171:$VJ1,174:$VK1},{167:279,168:$VD1,169:$VE1,172:278,174:[2,182]},{174:[2,176]},{174:[2,177]},o($VL1,[2,178]),o($VL1,[2,179]),{16:$Vu1,52:$V31,67:251,162:280,173:250,175:249},o($VM1,$VN1,{184:281,67:283,51:$VO1,52:$V31}),{17:[1,284]},{17:[1,285],45:$Vx1},o($Vg1,[2,142],{131:286,132:287,136:[1,288]}),{16:$Vi,34:$Vj,49:289,52:$Vk,53:$Vl,54:47,55:48,56:$Vm,57:$Vn,58:49,59:$Vo,60:$Vp,61:50,62:$Vq,63:38,64:40,67:39,76:46,77:$Vr,79:41,80:$Vs,81:37,82:$Vt,83:$Vu,84:$Vv,85:$Vw,87:$Vx,88:$Vy,89:$Vz,91:36,102:$VA,105:35,121:33},o($Vz1,[2,172]),{52:$V31,67:291,182:290},{16:$Vu1,52:$V31,67:251,175:292},{177:293,180:$VP1},{174:[1,295]},{174:[2,181]},{174:[1,296]},{170:297,171:$VJ1,174:$VK1},{38:$VA1,90:[1,298],164:258,165:$VB1,166:$VC1,167:260,168:$VD1,169:$VE1,174:$VF1,178:$VG1},o($VH1,[2,211],{190:299,191:300,192:301,193:$VQ1,194:$VR1,195:$VS1}),{52:$V31,67:305},o($VM1,[2,202],{68:$V21}),o($VH1,$VN1,{67:283,184:306,51:$VO1,52:$V31}),o($VH1,[2,220]),o($VT1,[2,156],{144:307,145:[1,308]}),o($Vg1,[2,143]),{16:$Vi,34:$Vj,49:32,52:$Vk,53:$Vl,54:47,55:48,56:$Vm,57:$Vn,58:49,59:$Vo,60:$Vp,61:50,62:$Vq,63:38,64:40,67:39,76:46,77:$Vr,79:41,80:$Vs,81:37,82:$Vt,83:$Vu,84:$Vv,85:$Vw,87:$Vx,88:$Vy,89:$Vz,91:36,102:$VA,105:35,121:33,137:309,140:31},o($VI1,[2,141],{108:$VH,125:$VI,126:$VJ,127:$VK,128:$VL}),{17:[1,310],45:[1,311]},o($V91,[2,196],{68:$V21}),o([6,8,14,17,38,45,90,130,136,139,145,147,151,153,155,165,166,168,169,174,178,183],[2,184],{176:312,177:313,180:$VP1,181:$VU1}),o($VH1,[2,186]),{16:$Vi,34:$Vj,49:315,52:$Vk,53:$Vl,54:47,55:48,56:$Vm,57:$Vn,58:49,59:$Vo,60:$Vp,61:50,62:$Vq,63:38,64:40,67:39,76:46,77:$Vr,79:41,80:$Vs,81:37,82:$Vt,83:$Vu,84:$Vv,85:$Vw,87:$Vx,88:$Vy,89:$Vz,91:36,102:$VA,105:35,121:33},{16:$Vu1,52:$V31,67:251,162:316,173:250,175:249},{16:$Vu1,52:$V31,67:251,175:317},{174:[2,183]},o($Vz1,[2,174]),o($VH1,[2,218]),o($VH1,[2,212]),o($VH1,[2,213]),{185:319,186:$VV1,187:$VW1},{185:322,186:$VV1,187:$VW1},{185:323,186:$VV1,187:$VW1},o($VM1,[2,201],{68:$V21}),o($VH1,[2,219]),o($Vh,$Va,{138:18,11:324,139:$Vb}),{16:$Vi,34:$Vj,49:325,52:$Vk,53:$Vl,54:47,55:48,56:$Vm,57:$Vn,58:49,59:$Vo,60:$Vp,61:50,62:$Vq,63:38,64:40,67:39,76:46,77:$Vr,79:41,80:$Vs,81:37,82:$Vt,83:$Vu,84:$Vv,85:$Vw,87:$Vx,88:$Vy,89:$Vz,91:36,102:$VA,105:35,121:33},o($Vg1,$VD,{133:326,45:$VE,134:$VF}),o([6,8,14,17,38,45,51,52,90,130,136,139,145,147,151,153,155,165,166,168,169,174,178,180,181,183,193,194,195],[2,199]),{52:$V31,67:327},o($VH1,[2,185]),o($VH1,[2,192]),{16:[1,328]},o($VH1,[2,191],{108:$VH,125:$VI,126:$VJ,127:$VK,128:$VL}),{38:$VA1,164:258,165:$VB1,166:$VC1,167:260,168:$VD1,169:$VE1,174:$VF1,176:329,177:313,178:$VG1,180:$VP1,181:$VU1},o($VH1,[2,188]),{192:330,193:$VQ1,194:$VR1,195:$VS1},{16:$VX1,153:$VY1,188:331},o($VZ1,[2,203]),o($VZ1,[2,204]),{16:$VX1,153:$VY1,188:333},{16:$VX1,153:$VY1,188:334},o($VC,$Vf,{146:28,12:335,147:$Vg}),o($VT1,[2,157],{108:$VH,125:$VI,126:$VJ,127:$VK,128:$VL}),o($Vg1,[2,146]),o($V91,[2,197],{68:$V21}),{52:$V31,67:337,69:336},o($VH1,[2,187]),o($VH1,[2,214]),{16:[1,338]},{136:[1,341],139:[1,340],174:[1,339]},{16:[1,342]},{16:[1,343]},o($V_1,[2,163],{149:344,150:345,151:[1,346]}),{17:[1,347],45:$V$1},o($V91,[2,67],{68:$V21}),{17:[2,209],52:$V31,67:337,69:350,189:349},{16:[2,206]},{16:[2,207]},{16:[2,208]},{52:$V31,67:337,69:351},{52:$V31,67:337,69:352},o($Vs1,[2,166],{152:353,153:[1,354],155:[1,355]}),o($V_1,[2,164]),{52:[1,357],64:356},o($VH1,[2,193]),{52:$V31,67:358},{17:[1,359]},{17:[2,210],45:$V$1},{17:[1,360],45:$V$1},{17:[1,361],45:$V$1},o($Vs1,[2,170]),{154:[1,362]},{106:[1,363]},o($V_1,[2,165]),{16:$V51},o($V91,[2,68],{68:$V21}),o($VH1,[2,215]),o($VH1,[2,216]),o($VH1,[2,217]),o($Vs1,[2,167]),{156:[1,364]},{157:[1,365]},o($Vs1,[2,168])],
defaultActions: {11:[2,3],22:[2,1],24:[2,2],141:[2,122],142:[2,123],262:[2,176],263:[2,177],277:[2,181],297:[2,183],339:[2,206],340:[2,207],341:[2,208]},
parseError: function parseError (str, hash) {
    if (hash.recoverable) {
        this.trace(str);
    } else {
        var error = new Error(str);
        error.hash = hash;
        throw error;
    }
},
parse: function parse(input) {
    var self = this, stack = [0], tstack = [], vstack = [null], lstack = [], table = this.table, yytext = '', yylineno = 0, yyleng = 0, recovering = 0, TERROR = 2, EOF = 1;
    var args = lstack.slice.call(arguments, 1);
    var lexer = Object.create(this.lexer);
    var sharedState = { yy: {} };
    for (var k in this.yy) {
        if (Object.prototype.hasOwnProperty.call(this.yy, k)) {
            sharedState.yy[k] = this.yy[k];
        }
    }
    lexer.setInput(input, sharedState.yy);
    sharedState.yy.lexer = lexer;
    sharedState.yy.parser = this;
    if (typeof lexer.yylloc == 'undefined') {
        lexer.yylloc = {};
    }
    var yyloc = lexer.yylloc;
    lstack.push(yyloc);
    var ranges = lexer.options && lexer.options.ranges;
    if (typeof sharedState.yy.parseError === 'function') {
        this.parseError = sharedState.yy.parseError;
    } else {
        this.parseError = Object.getPrototypeOf(this).parseError;
    }
    function popStack(n) {
        stack.length = stack.length - 2 * n;
        vstack.length = vstack.length - n;
        lstack.length = lstack.length - n;
    }
    _token_stack:
        var lex = function () {
            var token;
            token = lexer.lex() || EOF;
            if (typeof token !== 'number') {
                token = self.symbols_[token] || token;
            }
            return token;
        };
    var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;
    while (true) {
        state = stack[stack.length - 1];
        if (this.defaultActions[state]) {
            action = this.defaultActions[state];
        } else {
            if (symbol === null || typeof symbol == 'undefined') {
                symbol = lex();
            }
            action = table[state] && table[state][symbol];
        }
                    if (typeof action === 'undefined' || !action.length || !action[0]) {
                var errStr = '';
                expected = [];
                for (p in table[state]) {
                    if (this.terminals_[p] && p > TERROR) {
                        expected.push('\'' + this.terminals_[p] + '\'');
                    }
                }
                if (lexer.showPosition) {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ':\n' + lexer.showPosition() + '\nExpecting ' + expected.join(', ') + ', got \'' + (this.terminals_[symbol] || symbol) + '\'';
                } else {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ': Unexpected ' + (symbol == EOF ? 'end of input' : '\'' + (this.terminals_[symbol] || symbol) + '\'');
                }
                this.parseError(errStr, {
                    text: lexer.match,
                    token: this.terminals_[symbol] || symbol,
                    line: lexer.yylineno,
                    loc: yyloc,
                    expected: expected
                });
            }
        if (action[0] instanceof Array && action.length > 1) {
            throw new Error('Parse Error: multiple actions possible at state: ' + state + ', token: ' + symbol);
        }
        switch (action[0]) {
        case 1:
            stack.push(symbol);
            vstack.push(lexer.yytext);
            lstack.push(lexer.yylloc);
            stack.push(action[1]);
            symbol = null;
            if (!preErrorSymbol) {
                yyleng = lexer.yyleng;
                yytext = lexer.yytext;
                yylineno = lexer.yylineno;
                yyloc = lexer.yylloc;
                if (recovering > 0) {
                    recovering--;
                }
            } else {
                symbol = preErrorSymbol;
                preErrorSymbol = null;
            }
            break;
        case 2:
            len = this.productions_[action[1]][1];
            yyval.$ = vstack[vstack.length - len];
            yyval._$ = {
                first_line: lstack[lstack.length - (len || 1)].first_line,
                last_line: lstack[lstack.length - 1].last_line,
                first_column: lstack[lstack.length - (len || 1)].first_column,
                last_column: lstack[lstack.length - 1].last_column
            };
            if (ranges) {
                yyval._$.range = [
                    lstack[lstack.length - (len || 1)].range[0],
                    lstack[lstack.length - 1].range[1]
                ];
            }
            r = this.performAction.apply(yyval, [
                yytext,
                yyleng,
                yylineno,
                sharedState.yy,
                action[1],
                vstack,
                lstack
            ].concat(args));
            if (typeof r !== 'undefined') {
                return r;
            }
            if (len) {
                stack = stack.slice(0, -1 * len * 2);
                vstack = vstack.slice(0, -1 * len);
                lstack = lstack.slice(0, -1 * len);
            }
            stack.push(this.productions_[action[1]][0]);
            vstack.push(yyval.$);
            lstack.push(yyval._$);
            newState = table[stack[stack.length - 2]][stack[stack.length - 1]];
            stack.push(newState);
            break;
        case 3:
            return true;
        }
    }
    return true;
}};
/* generated by jison-lex 0.3.4 */
var lexer = (function(){
var lexer = ({

EOF:1,

parseError:function parseError(str, hash) {
        if (this.yy.parser) {
            this.yy.parser.parseError(str, hash);
        } else {
            throw new Error(str);
        }
    },

// resets the lexer, sets new input
setInput:function (input, yy) {
        this.yy = yy || this.yy || {};
        this._input = input;
        this._more = this._backtrack = this.done = false;
        this.yylineno = this.yyleng = 0;
        this.yytext = this.matched = this.match = '';
        this.conditionStack = ['INITIAL'];
        this.yylloc = {
            first_line: 1,
            first_column: 0,
            last_line: 1,
            last_column: 0
        };
        if (this.options.ranges) {
            this.yylloc.range = [0,0];
        }
        this.offset = 0;
        return this;
    },

// consumes and returns one char from the input
input:function () {
        var ch = this._input[0];
        this.yytext += ch;
        this.yyleng++;
        this.offset++;
        this.match += ch;
        this.matched += ch;
        var lines = ch.match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno++;
            this.yylloc.last_line++;
        } else {
            this.yylloc.last_column++;
        }
        if (this.options.ranges) {
            this.yylloc.range[1]++;
        }

        this._input = this._input.slice(1);
        return ch;
    },

// unshifts one char (or a string) into the input
unput:function (ch) {
        var len = ch.length;
        var lines = ch.split(/(?:\r\n?|\n)/g);

        this._input = ch + this._input;
        this.yytext = this.yytext.substr(0, this.yytext.length - len);
        //this.yyleng -= len;
        this.offset -= len;
        var oldLines = this.match.split(/(?:\r\n?|\n)/g);
        this.match = this.match.substr(0, this.match.length - 1);
        this.matched = this.matched.substr(0, this.matched.length - 1);

        if (lines.length - 1) {
            this.yylineno -= lines.length - 1;
        }
        var r = this.yylloc.range;

        this.yylloc = {
            first_line: this.yylloc.first_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.first_column,
            last_column: lines ?
                (lines.length === oldLines.length ? this.yylloc.first_column : 0)
                 + oldLines[oldLines.length - lines.length].length - lines[0].length :
              this.yylloc.first_column - len
        };

        if (this.options.ranges) {
            this.yylloc.range = [r[0], r[0] + this.yyleng - len];
        }
        this.yyleng = this.yytext.length;
        return this;
    },

// When called from action, caches matched text and appends it on next action
more:function () {
        this._more = true;
        return this;
    },

// When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.
reject:function () {
        if (this.options.backtrack_lexer) {
            this._backtrack = true;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });

        }
        return this;
    },

// retain first n characters of the match
less:function (n) {
        this.unput(this.match.slice(n));
    },

// displays already matched input, i.e. for error messages
pastInput:function () {
        var past = this.matched.substr(0, this.matched.length - this.match.length);
        return (past.length > 20 ? '...':'') + past.substr(-20).replace(/\n/g, "");
    },

// displays upcoming input, i.e. for error messages
upcomingInput:function () {
        var next = this.match;
        if (next.length < 20) {
            next += this._input.substr(0, 20-next.length);
        }
        return (next.substr(0,20) + (next.length > 20 ? '...' : '')).replace(/\n/g, "");
    },

// displays the character position where the lexing error occurred, i.e. for error messages
showPosition:function () {
        var pre = this.pastInput();
        var c = new Array(pre.length + 1).join("-");
        return pre + this.upcomingInput() + "\n" + c + "^";
    },

// test the lexed token: return FALSE when not a match, otherwise return token
test_match:function(match, indexed_rule) {
        var token,
            lines,
            backup;

        if (this.options.backtrack_lexer) {
            // save context
            backup = {
                yylineno: this.yylineno,
                yylloc: {
                    first_line: this.yylloc.first_line,
                    last_line: this.last_line,
                    first_column: this.yylloc.first_column,
                    last_column: this.yylloc.last_column
                },
                yytext: this.yytext,
                match: this.match,
                matches: this.matches,
                matched: this.matched,
                yyleng: this.yyleng,
                offset: this.offset,
                _more: this._more,
                _input: this._input,
                yy: this.yy,
                conditionStack: this.conditionStack.slice(0),
                done: this.done
            };
            if (this.options.ranges) {
                backup.yylloc.range = this.yylloc.range.slice(0);
            }
        }

        lines = match[0].match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno += lines.length;
        }
        this.yylloc = {
            first_line: this.yylloc.last_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.last_column,
            last_column: lines ?
                         lines[lines.length - 1].length - lines[lines.length - 1].match(/\r?\n?/)[0].length :
                         this.yylloc.last_column + match[0].length
        };
        this.yytext += match[0];
        this.match += match[0];
        this.matches = match;
        this.yyleng = this.yytext.length;
        if (this.options.ranges) {
            this.yylloc.range = [this.offset, this.offset += this.yyleng];
        }
        this._more = false;
        this._backtrack = false;
        this._input = this._input.slice(match[0].length);
        this.matched += match[0];
        token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);
        if (this.done && this._input) {
            this.done = false;
        }
        if (token) {
            return token;
        } else if (this._backtrack) {
            // recover context
            for (var k in backup) {
                this[k] = backup[k];
            }
            return false; // rule action called reject() implying the next rule should be tested instead.
        }
        return false;
    },

// return next match in input
next:function () {
        if (this.done) {
            return this.EOF;
        }
        if (!this._input) {
            this.done = true;
        }

        var token,
            match,
            tempMatch,
            index;
        if (!this._more) {
            this.yytext = '';
            this.match = '';
        }
        var rules = this._currentRules();
        for (var i = 0; i < rules.length; i++) {
            tempMatch = this._input.match(this.rules[rules[i]]);
            if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
                match = tempMatch;
                index = i;
                if (this.options.backtrack_lexer) {
                    token = this.test_match(tempMatch, rules[i]);
                    if (token !== false) {
                        return token;
                    } else if (this._backtrack) {
                        match = false;
                        continue; // rule action called reject() implying a rule MISmatch.
                    } else {
                        // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
                        return false;
                    }
                } else if (!this.options.flex) {
                    break;
                }
            }
        }
        if (match) {
            token = this.test_match(match, rules[index]);
            if (token !== false) {
                return token;
            }
            // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
            return false;
        }
        if (this._input === "") {
            return this.EOF;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });
        }
    },

// return next match that has a token
lex:function lex () {
        var r = this.next();
        if (r) {
            return r;
        } else {
            return this.lex();
        }
    },

// activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)
begin:function begin (condition) {
        this.conditionStack.push(condition);
    },

// pop the previously active lexer condition state off the condition stack
popState:function popState () {
        var n = this.conditionStack.length - 1;
        if (n > 0) {
            return this.conditionStack.pop();
        } else {
            return this.conditionStack[0];
        }
    },

// produce the lexer rule set which is active for the currently active lexer condition state
_currentRules:function _currentRules () {
        if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {
            return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;
        } else {
            return this.conditions["INITIAL"].rules;
        }
    },

// return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available
topState:function topState (n) {
        n = this.conditionStack.length - 1 - Math.abs(n || 0);
        if (n >= 0) {
            return this.conditionStack[n];
        } else {
            return "INITIAL";
        }
    },

// alias for begin(condition)
pushState:function pushState (condition) {
        this.begin(condition);
    },

// return the number of states currently on the stack
stateStackSize:function stateStackSize() {
        return this.conditionStack.length;
    },
options: {"case-insensitive":true},
performAction: function anonymous(yy,yy_,$avoiding_name_collisions,YY_START) {
var YYSTATE=YY_START;
switch($avoiding_name_collisions) {
case 0:/* skip comments */
break;
case 1:/* skip sql comments */
break;
case 2:/* skip sql comments */
break;
case 3:/* skip whitespace */
break;
case 4:return 52
break;
case 5:return 52
break;
case 6:return 52
break;
case 7:return 18
break;
case 8:return 30
break;
case 9:return 120
break;
case 10:return 31
break;
case 11:return 32
break;
case 12:return 35
break;
case 13:return 36
break;
case 14:return 38
break;
case 15:return 39
break;
case 16:return 40
break;
case 17:return 41
break;
case 18:return 42
break;
case 19:return 43
break;
case 20:return 44
break;
case 21:return 48
break;
case 22:return 51
break;
case 23:return 59
break;
case 24:return 60
break;
case 25:return 62
break;
case 26:return 'COLLATE'
break;
case 27:return 85
break;
case 28:return 87
break;
case 29:return 88
break;
case 30:return 77
break;
case 31:return 72
break;
case 32:return 73
break;
case 33:return 75
break;
case 34:return 78
break;
case 35:return 97
break;
case 36:return 98
break;
case 37:return 102
break;
case 38:return 107
break;
case 39:return 106
break;
case 40:return 109
break;
case 41:return 110
break;
case 42:return 104
break;
case 43:return 111
break;
case 44:return 122
break;
case 45:return 124
break;
case 46:return 108
break;
case 47:return 127
break;
case 48:return 128
break;
case 49:return 158
break;
case 50:return 183
break;
case 51:return 193
break;
case 52:return 186
break;
case 53:return 187
break;
case 54:return 153
break;
case 55:return 174
break;
case 56:return 139
break;
case 57:return 136
break;
case 58:return 194
break;
case 59:return 195
break;
case 60:return 165
break;
case 61:return 166
break;
case 62:return 180
break;
case 63:return 181
break;
case 64:return 168
break;
case 65:return 169
break;
case 66:return 171
break;
case 67:return 178
break;
case 68:return 130
break;
case 69:return 142
break;
case 70:return 143
break;
case 71:return 134
break;
case 72:return 135
break;
case 73:return 145
break;
case 74:return 148
break;
case 75:return 151
break;
case 76:return 154
break;
case 77:return 155
break;
case 78:return 156
break;
case 79:return 157
break;
case 80:return 163
break;
case 81:return 147
break;
case 82:return 14
break;
case 83:return 33
break;
case 84:return 45
break;
case 85:return 37
break;
case 86:return 16
break;
case 87:return 17
break;
case 88:return 83
break;
case 89:return 118
break;
case 90:return 84
break;
case 91:return 92
break;
case 92:return 93
break;
case 93:return 80
break;
case 94:return 82
break;
case 95:return 47
break;
case 96:return 96
break;
case 97:return 99
break;
case 98:return 100
break;
case 99:return 95
break;
case 100:return 113
break;
case 101:return 114
break;
case 102:return 94
break;
case 103:return '<=>'
break;
case 104:return 115
break;
case 105:return 117
break;
case 106:return 116
break;
case 107:return 89
break;
case 108:return 90
break;
case 109:return 8
break;
case 110:return 53
break;
case 111:return 53
break;
case 112:return 57
break;
case 113:return 34
break;
case 114:return 56
break;
case 115:return 52
break;
case 116:return 68
break;
case 117:return 53
break;
case 118:return 53
break;
case 119:return 52
break;
case 120:return 6
break;
case 121:return 'INVALID'
break;
}
},
rules: [/^(?:[/][*](.|\n)*?[*][/])/i,/^(?:[-][-]\s.*\n)/i,/^(?:[#]\s.*\n)/i,/^(?:\s+)/i,/^(?:[`][a-zA-Z_\u4e00-\u9fa5][a-zA-Z0-9_\u4e00-\u9fa5]*[`])/i,/^(?:[\w]+[\u4e00-\u9fa5]+[0-9a-zA-Z_\u4e00-\u9fa5]*)/i,/^(?:[\u4e00-\u9fa5][0-9a-zA-Z_\u4e00-\u9fa5]*)/i,/^(?:SELECT\b)/i,/^(?:ALL\b)/i,/^(?:ANY\b)/i,/^(?:DISTINCT\b)/i,/^(?:DISTINCTROW\b)/i,/^(?:HIGH_PRIORITY\b)/i,/^(?:MAX_STATEMENT_TIME\b)/i,/^(?:STRAIGHT_JOIN\b)/i,/^(?:SQL_SMALL_RESULT\b)/i,/^(?:SQL_BIG_RESULT\b)/i,/^(?:SQL_BUFFER_RESULT\b)/i,/^(?:SQL_CACHE\b)/i,/^(?:SQL_NO_CACHE\b)/i,/^(?:SQL_CALC_FOUND_ROWS\b)/i,/^(?:([a-zA-Z_\u4e00-\u9fa5][a-zA-Z0-9_\u4e00-\u9fa5]*\.){1,2}\*)/i,/^(?:AS\b)/i,/^(?:TRUE\b)/i,/^(?:FALSE\b)/i,/^(?:NULL\b)/i,/^(?:COLLATE\b)/i,/^(?:BINARY\b)/i,/^(?:ROW\b)/i,/^(?:EXISTS\b)/i,/^(?:CASE\b)/i,/^(?:WHEN\b)/i,/^(?:THEN\b)/i,/^(?:ELSE\b)/i,/^(?:END\b)/i,/^(?:DIV\b)/i,/^(?:MOD\b)/i,/^(?:NOT\b)/i,/^(?:BETWEEN\b)/i,/^(?:IN\b)/i,/^(?:SOUNDS\b)/i,/^(?:LIKE\b)/i,/^(?:ESCAPE\b)/i,/^(?:REGEXP\b)/i,/^(?:IS\b)/i,/^(?:UNKNOWN\b)/i,/^(?:AND\b)/i,/^(?:OR\b)/i,/^(?:XOR\b)/i,/^(?:FROM\b)/i,/^(?:PARTITION\b)/i,/^(?:USE\b)/i,/^(?:INDEX\b)/i,/^(?:KEY\b)/i,/^(?:FOR\b)/i,/^(?:JOIN\b)/i,/^(?:ORDER\s+BY\b)/i,/^(?:GROUP\s+BY\b)/i,/^(?:IGNORE\b)/i,/^(?:FORCE\b)/i,/^(?:INNER\b)/i,/^(?:CROSS\b)/i,/^(?:ON\b)/i,/^(?:USING\b)/i,/^(?:LEFT\b)/i,/^(?:RIGHT\b)/i,/^(?:OUTER\b)/i,/^(?:NATURAL\b)/i,/^(?:WHERE\b)/i,/^(?:ASC\b)/i,/^(?:DESC\b)/i,/^(?:WITH\b)/i,/^(?:ROLLUP\b)/i,/^(?:HAVING\b)/i,/^(?:OFFSET\b)/i,/^(?:PROCEDURE\b)/i,/^(?:UPDATE\b)/i,/^(?:LOCK\b)/i,/^(?:SHARE\b)/i,/^(?:MODE\b)/i,/^(?:OJ\b)/i,/^(?:LIMIT\b)/i,/^(?:UNION\b)/i,/^(?:TOP\b)/i,/^(?:,)/i,/^(?:=)/i,/^(?:\()/i,/^(?:\))/i,/^(?:~)/i,/^(?:!=)/i,/^(?:!)/i,/^(?:\|)/i,/^(?:&)/i,/^(?:\+)/i,/^(?:-)/i,/^(?:\*)/i,/^(?:\/)/i,/^(?:%)/i,/^(?:\^)/i,/^(?:>>)/i,/^(?:>=)/i,/^(?:>)/i,/^(?:<<)/i,/^(?:<=>)/i,/^(?:<=)/i,/^(?:<>)/i,/^(?:<)/i,/^(?:\{)/i,/^(?:\})/i,/^(?:;)/i,/^(?:['](\\.|[^'])*['])/i,/^(?:["](\\.|[^"])*["])/i,/^(?:[0][x][0-9a-fA-F]+)/i,/^(?:[-]?[0-9]+(\.[0-9]+)?)/i,/^(?:[-]?[0-9]+(\.[0-9]+)?[eE][-][0-9]+(\.[0-9]+)?)/i,/^(?:[a-zA-Z_\u4e00-\u9fa5][a-zA-Z0-9_\u4e00-\u9fa5]*)/i,/^(?:\.)/i,/^(?:["][a-zA-Z_\u4e00-\u9fa5][a-zA-Z0-9_\u4e00-\u9fa5]*["])/i,/^(?:['][a-zA-Z_\u4e00-\u9fa5][a-zA-Z0-9_\u4e00-\u9fa5]*['])/i,/^(?:([`])(?:(?=(\\?))\2.)*?\1)/i,/^(?:$)/i,/^(?:.)/i],
conditions: {"INITIAL":{"rules":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121],"inclusive":true}}
});
return lexer;
})();
parser.lexer = lexer;
function Parser () {
  this.yy = {};
}
Parser.prototype = parser;parser.Parser = Parser;
return new Parser;
})();if (!sqlParser) {
  sqlParser = {};
}

function Sql() {
  this.buffer = '';
}

sqlParser.stringify = function(ast) {
  var sql = new Sql();
  sql.travelMain(ast);
  return sql.buffer;
};

Sql.prototype.travel = function(ast) {
  if (!ast) return;

  if (typeof ast === 'string') {
    return this.append(ast);
  }

  var processor = this['travel' + ast.type];
  processor.call(this, ast);
};

var noSuffixFlag = false;
Sql.prototype.appendKeyword = function(keyword, noPrefix, noSuffix) {
  if (noSuffixFlag) {
    noPrefix = true;
    noSuffixFlag = false;
  }
  if (noPrefix) {
    this.buffer += keyword.toUpperCase();
  } else {
    this.buffer += ' ' + keyword.toUpperCase();
  }

  if (noSuffix) {
    noSuffixFlag = true;
  }
};
Sql.prototype.append = function(word, noPrefix, noSuffix) {
  if (noSuffixFlag) {
    noPrefix = true;
    noSuffixFlag = false;
  }
  if (noPrefix) {
    this.buffer += word;
  } else {
    this.buffer += ' ' + word;
  }

  if (noSuffix) {
    noSuffixFlag = true;
  }
};
Sql.prototype.travelMain = function(ast) {
  this.travel(ast.value);
  if (ast.hasSemicolon) {
    this.append(';', true);
  }
};
Sql.prototype.travelSelect = function(ast) {
  this.appendKeyword('select');
  if (ast.distinctOpt) {
    this.appendKeyword(ast.distinctOpt);
  }
  if (ast.topOpt) {
    this.appendKeyword("TOP " + ast.topOpt);
  }
  if (ast.highPriorityOpt) {
    this.appendKeyword(ast.highPriorityOpt);
  }
  if (ast.maxStateMentTimeOpt) {
    this.append('MAX_STATEMENT_TIME = ' + ast.maxStateMentTimeOpt);
  }
  if (ast.straightJoinOpt) {
    this.appendKeyword(ast.straightJoinOpt);
  }
  if (ast.sqlSmallResultOpt) {
    this.appendKeyword(ast.sqlSmallResultOpt);
  }
  if (ast.sqlBigResultOpt) {
    this.appendKeyword(ast.sqlBigResultOpt);
  }
  if (ast.sqlBufferResultOpt) {
    this.appendKeyword(ast.sqlBufferResultOpt);
  }
  if (ast.sqlCacheOpt) {
    this.appendKeyword(ast.sqlCacheOpt);
  }
  if (ast.sqlCalcFoundRowsOpt) {
    this.appendKeyword(ast.sqlCalcFoundRowsOpt);
  }
  if (ast.selectItems) {
    this.travelSelectExpr(ast.selectItems);
  }
  if (ast.from) {
    this.appendKeyword('from');
    this.travel(ast.from);
  }
  if (ast.partition) {
    this.travel(ast.partition);
  }
  if (ast.where) {
    this.appendKeyword('where');
    this.travel(ast.where);
  }
  if (ast.groupBy) {
    this.travel(ast.groupBy);
  }
  if (ast.having) {
    this.appendKeyword('having');
    this.travel(ast.having);
  }
  if (ast.orderBy) {
    this.travel(ast.orderBy);
  }
  if (ast.limit) {
    this.travel(ast.limit);
  }
  if (ast.procedure) {
    this.appendKeyword('procedure');
    this.travel(ast.procedure);
  }
  if (ast.updateLockMode) {
    this.appendKeyword(ast.updateLockMode);
  }
};
Sql.prototype.travelSelectExpr = function(ast) {
  var exprList = ast.value;
  for (var i = 0; i < exprList.length; i++) {
    if (typeof ast === 'string') {
      this.append(exprList[i]);
    } else {
      this.travel(exprList[i]);
      if (exprList[i].alias) {
        if (exprList[i].hasAs) {
          this.appendKeyword('as');
        }
        this.travel(exprList[i].alias);
      }
    }
    if (i !== exprList.length - 1) {
      this.append(',', true);
    }
  }
};
Sql.prototype.travelIsExpression = function(ast) {
  this.travel(ast.left);
  this.appendKeyword('in');
  if (ast.hasNot) {
    this.appendKeyword('not');
  }
  this.append(ast.right);
};
Sql.prototype.travelNotExpression = function(ast) {
  this.appendKeyword('not');
  this.travel(ast.value);
};
Sql.prototype.travelOrExpression = Sql.prototype.travelAndExpression = Sql.prototype.travelXORExpression = function(
  ast
) {
  this.travel(ast.left);
  this.appendKeyword(ast.operator);
  this.travel(ast.right);
};
Sql.prototype.travelNull = Sql.prototype.travelBoolean = Sql.prototype.travelBooleanExtra = function(
  ast
) {
  this.appendKeyword(ast.value);
};
Sql.prototype.travelNumber = function(ast) {
  this.append(ast.value);
};
Sql.prototype.travelString = function(ast) {
  this.append(ast.value);
};
Sql.prototype.travelFunctionCall = function(ast) {
  this.append(ast.name);
  this.append('(', true, true);
  var params = ast.params;
  for (var i = 0; i < params.length; i++) {
    var param = params[i];
    this.travel(param);
    if (i !== params.length - 1) {
      this.append(',', true);
    }
  }
  this.append(')', true);
};
Sql.prototype.travelFunctionCallParam = function(ast) {
  if (ast.distinctOpt) {
    this.appendKeyword(ast.distinctOpt);
  }
  this.travel(ast.value);
};
Sql.prototype.travelIdentifier = function(ast) {
  this.append(ast.value);
};
Sql.prototype.travelIdentifierList = function(ast) {
  var list = ast.value;
  for (var i = 0; i < list.length; i++) {
    this.travel(list[i]);
    if (i !== list.length - 1) {
      this.append(',', true);
    }
  }
};
Sql.prototype.travelWhenThenList = function(ast) {
  var list = ast.value;
  for (var i = 0; i < list.length; i++) {
    this.appendKeyword('when');
    this.travel(list[i].when);
    this.appendKeyword('then');
    this.travel(list[i].then);
  }
};
Sql.prototype.travelCaseWhen = function(ast) {
  this.appendKeyword('case');
  if (ast.caseExprOpt) {
    this.travel(ast.caseExprOpt);
  }
  this.travel(ast.whenThenList);
  if (ast.else) {
    this.appendKeyword('else');
    this.travel(ast.else);
  }
  this.appendKeyword('end');
};
Sql.prototype.travelPrefix = function(ast) {
  this.appendKeyword(ast.prefix);
  this.travel(ast.value);
};
Sql.prototype.travelSimpleExprParentheses = function(ast) {
  if (ast.hasRow) {
    this.appendKeyword('row');
  }
  this.append('(', false, true);
  this.travel(ast.value);
  this.append(')', true);
};
Sql.prototype.travelSubQuery = function(ast) {
  if (ast.hasExists) {
    this.appendKeyword('exists');
  }
  this.append('(', false, true);
  this.travel(ast.value);
  this.append(')', true);
};
Sql.prototype.travelIdentifierExpr = function(ast) {
  this.append('{');
  this.travel(ast.identifier);
  this.travel(ast.value);
  this.append('}');
};
Sql.prototype.travelBitExpression = function(ast) {
  this.travel(ast.left);
  this.appendKeyword(ast.operator);
  this.travel(ast.right);
};
Sql.prototype.travelInSubQueryPredicate = function(ast) {
  this.travel(ast.left);
  if (ast.hasNot) {
    this.appendKeyword('not');
  }
  this.appendKeyword('in');
  this.append('(', false, true);
  this.travel(ast.right);
  this.append(')');
};
Sql.prototype.travelInExpressionListPredicate = function(ast) {
  this.travel(ast.left);
  if (ast.hasNot) {
    this.appendKeyword('not');
  }
  this.appendKeyword('in');
  this.append('(', false, true);
  this.travel(ast.right);
  this.append(')');
};
Sql.prototype.travelBetweenPredicate = function(ast) {
  this.travel(ast.left);
  if (ast.hasNot) {
    this.appendKeyword('not');
  }
  this.appendKeyword('between');
  this.travel(ast.right.left);
  this.appendKeyword('and');
  this.travel(ast.right.right);
};
Sql.prototype.travelSoundsLikePredicate = function(ast) {
  this.travel(ast.left);
  this.appendKeyword('sounds');
  this.appendKeyword('like');
  this.travel(ast.right);
};
Sql.prototype.travelLikePredicate = function(ast) {
  this.travel(ast.left);
  if (ast.hasNot) {
    this.appendKeyword('not');
  }
  this.appendKeyword('like');
  this.travel(ast.right);
  if (ast.escape) {
    this.appendKeyword('escape');
    this.travel(ast.escape);
  }
};
Sql.prototype.travelRegexpPredicate = function(ast) {
  this.travel(ast.left);
  if (ast.hasNot) {
    this.appendKeyword('not');
  }
  this.appendKeyword('regexp');
  this.travel(ast.right);
};
Sql.prototype.travelIsNullBooleanPrimary = function(ast) {
  this.travel(ast.value);
  this.appendKeyword('is');
  if (ast.hasNot) {
    this.appendKeyword('not');
  }
  this.appendKeyword('null');
};
Sql.prototype.travelComparisonBooleanPrimary = function(ast) {
  this.travel(ast.left);
  this.append(ast.operator);
  this.travel(ast.right);
};
Sql.prototype.travelComparisonSubQueryBooleanPrimary = function(ast) {
  this.travel(ast.left);
  this.append(ast.operator);
  this.appendKeyword(ast.subQueryOpt);
  this.append('(', false, true);
  this.travel(ast.right);
  this.append(')');
};
Sql.prototype.travelExpressionList = function(ast) {
  var list = ast.value;
  for (var i = 0; i < list.length; i++) {
    this.travel(list[i]);
    if (i !== list.length - 1) {
      this.append(',', true);
    }
  }
};
Sql.prototype.travelGroupBy = function(ast) {
  this.appendKeyword('group by');
  var list = ast.value;
  for (var i = 0; i < list.length; i++) {
    this.travel(list[i]);
    if (i !== list.length - 1) {
      this.append(',', true);
    }
  }
};
Sql.prototype.travelOrderBy = function(ast) {
  this.appendKeyword('order by');
  var list = ast.value;
  for (var i = 0; i < list.length; i++) {
    this.travel(list[i]);
    if (i !== list.length - 1) {
      this.append(',', true);
    }
  }
  if (ast.rollUp) {
    this.appendKeyword('with rollup');
  }
};
Sql.prototype.travelGroupByOrderByItem = function(ast) {
  this.travel(ast.value);
  if (ast.sortOpt) {
    this.appendKeyword(ast.sortOpt);
  }
};
Sql.prototype.travelLimit = function(ast) {
  this.appendKeyword('limit');
  var list = ast.value;
  if (list.length === 1) {
    this.append(list[0]);
  } else if (list.length === 2) {
    if (ast.offsetMode) {
      this.append(list[1]);
      this.append('offset');
      this.append(list[0]);
    } else {
      this.append(list[0]);
      this.append(',', true);
      this.append(list[1]);
    }
  }
};
Sql.prototype.travelTableReferences = function(ast) {
  var list = ast.value;
  if (ast.TableReferences) {
    this.append('(', false, true);
  }
  for (var i = 0; i < list.length; i++) {
    this.travel(list[i]);
    if (i !== list.length - 1) {
      this.append(',', true);
    }
  }
  if (ast.TableReferences) {
    this.append(')');
  }
};
Sql.prototype.travelTableReference = function(ast) {
  if (ast.hasOj) {
    this.append('{');
    this.appendKeyword('oj');
    this.travel(ast.value);
    this.append('}');
  } else {
    this.travel(ast.value);
  }
};
Sql.prototype.travelInnerCrossJoinTable = function(ast) {
  this.travel(ast.left);
  if (ast.innerCrossOpt) {
    this.appendKeyword(ast.innerCrossOpt);
  }
  this.appendKeyword('join');
  this.travel(ast.right);
  if (ast.condition) {
    this.travel(ast.condition);
  }
};
Sql.prototype.travelStraightJoinTable = function(ast) {
  this.travel(ast.left);
  this.appendKeyword('straight_join');
  this.travel(ast.right);
  this.travel(ast.condition);
};
Sql.prototype.travelLeftRightJoinTable = function(ast) {
  this.travel(ast.left);
  this.appendKeyword(ast.leftRight);
  if (ast.outOpt) {
    this.appendKeyword(ast.outOpt);
  }
  this.appendKeyword('join');
  this.travel(ast.right);
  this.travel(ast.condition);
};
Sql.prototype.travelNaturalJoinTable = function(ast) {
  this.travel(ast.left);
  this.appendKeyword('natural');
  if (ast.leftRight) {
    this.appendKeyword(ast.leftRight);
  }
  if (ast.outOpt) {
    this.appendKeyword(ast.outOpt);
  }
  this.appendKeyword('join');
  this.travel(ast.right);
};
Sql.prototype.travelOnJoinCondition = function(ast) {
  this.appendKeyword('on');
  this.travel(ast.value);
};
Sql.prototype.travelUsingJoinCondition = function(ast) {
  this.appendKeyword('using');
  this.appendKeyword('(', false, true);
  this.travel(ast.value);
  this.appendKeyword(')');
};
Sql.prototype.travelPartitions = function(ast) {
  this.appendKeyword('partition');
  this.appendKeyword('(', false, true);
  var list = ast.value;
  for (var i = 0; i < list.length; i++) {
    this.travel(list[i]);
    if (i !== list.length - 1) {
      this.append(',', true);
    }
  }
  this.appendKeyword(')');
};
Sql.prototype.travelForOptIndexHint = function(ast) {
  this.appendKeyword('for');
  this.appendKeyword(ast.value);
};
Sql.prototype.travelIndexList = function(ast) {
  var list = ast.value;
  for (var i = 0; i < list.length; i++) {
    this.travel(list[i]);
    if (i !== list.length - 1) {
      this.append(',', true);
    }
  }
};
Sql.prototype.travelUseIndexHint = function(ast) {
  this.appendKeyword('use');
  this.appendKeyword(ast.indexOrKey);
  if (ast.forOpt) {
    this.travel(ast.forOpt);
  }
  this.appendKeyword('(', false, true);
  if (ast.value) {
    this.travel(ast.value);
  }
  this.appendKeyword(')');
};
Sql.prototype.travelIgnoreIndexHint = function(ast) {
  this.appendKeyword('ignore');
  this.appendKeyword(ast.indexOrKey);
  if (ast.forOpt) {
    this.travel(ast.forOpt);
  }
  this.appendKeyword('(', false, true);
  if (ast.value) {
    this.travel(ast.value);
  }
  this.appendKeyword(')');
};
Sql.prototype.travelForceIndexHint = function(ast) {
  this.appendKeyword('force');
  this.appendKeyword(ast.indexOrKey);
  if (ast.forOpt) {
    this.travel(ast.forOpt);
  }
  this.appendKeyword('(', false, true);
  if (ast.value) {
    this.travel(ast.value);
  }
  this.appendKeyword(')');
};
Sql.prototype.travelTableFactor = function(ast) {
  this.travel(ast.value);
  if (ast.partition) {
    this.travel(ast.partition);
  }
  if (ast.alias) {
    if (ast.hasAs) {
      this.appendKeyword('as');
    }
    this.travel(ast.alias);
  }
  if (ast.indexHintOpt) {
    this.travel(ast.indexHintOpt);
  }
};
Sql.prototype.travelUnion = function(ast) {
  this.travel(ast.left);
  this.appendKeyword('UNION');
  if (ast.distinctOpt) {
    this.appendKeyword(ast.distinctOpt);
  }
  this.travel(ast.right);
};
Sql.prototype.travelSelectParenthesized = function(ast) {
  this.appendKeyword('(');
  this.travel(ast.value);
  this.appendKeyword(')');
};
var root = this
// AMD / RequireJS
if (typeof define !== 'undefined' && define.amd) {
    define([], function () {
        return sqlParser;
    });
}
// Node.js
else if (typeof module !== 'undefined' && module.exports) {
    module.exports = sqlParser;
}
// included directly via <script> tag
else {
    root.sqlParser = sqlParser;
}

if (!sqlParser) {
  sqlParser = {};
}

function Sql() {
  this.buffer = '';
}

sqlParser.stringify = function(ast) {
  var sql = new Sql();
  sql.travelMain(ast);
  return sql.buffer;
};

Sql.prototype.travel = function(ast) {
  if (!ast) return;

  if (typeof ast === 'string') {
    return this.append(ast);
  }

  var processor = this['travel' + ast.type];
  processor.call(this, ast);
};

var noSuffixFlag = false;
Sql.prototype.appendKeyword = function(keyword, noPrefix, noSuffix) {
  if (noSuffixFlag) {
    noPrefix = true;
    noSuffixFlag = false;
  }
  if (noPrefix) {
    this.buffer += keyword.toUpperCase();
  } else {
    this.buffer += ' ' + keyword.toUpperCase();
  }

  if (noSuffix) {
    noSuffixFlag = true;
  }
};
Sql.prototype.append = function(word, noPrefix, noSuffix) {
  if (noSuffixFlag) {
    noPrefix = true;
    noSuffixFlag = false;
  }
  if (noPrefix) {
    this.buffer += word;
  } else {
    this.buffer += ' ' + word;
  }

  if (noSuffix) {
    noSuffixFlag = true;
  }
};
Sql.prototype.travelMain = function(ast) {
  this.travel(ast.value);
  if (ast.hasSemicolon) {
    this.append(';', true);
  }
};
Sql.prototype.travelSelect = function(ast) {
  this.appendKeyword('select');
  if (ast.distinctOpt) {
    this.appendKeyword(ast.distinctOpt);
  }
  if (ast.topOpt) {
    this.appendKeyword("TOP " + ast.topOpt);
  }
  if (ast.highPriorityOpt) {
    this.appendKeyword(ast.highPriorityOpt);
  }
  if (ast.maxStateMentTimeOpt) {
    this.append('MAX_STATEMENT_TIME = ' + ast.maxStateMentTimeOpt);
  }
  if (ast.straightJoinOpt) {
    this.appendKeyword(ast.straightJoinOpt);
  }
  if (ast.sqlSmallResultOpt) {
    this.appendKeyword(ast.sqlSmallResultOpt);
  }
  if (ast.sqlBigResultOpt) {
    this.appendKeyword(ast.sqlBigResultOpt);
  }
  if (ast.sqlBufferResultOpt) {
    this.appendKeyword(ast.sqlBufferResultOpt);
  }
  if (ast.sqlCacheOpt) {
    this.appendKeyword(ast.sqlCacheOpt);
  }
  if (ast.sqlCalcFoundRowsOpt) {
    this.appendKeyword(ast.sqlCalcFoundRowsOpt);
  }
  if (ast.selectItems) {
    this.travelSelectExpr(ast.selectItems);
  }
  if (ast.from) {
    this.appendKeyword('from');
    this.travel(ast.from);
  }
  if (ast.partition) {
    this.travel(ast.partition);
  }
  if (ast.where) {
    this.appendKeyword('where');
    this.travel(ast.where);
  }
  if (ast.groupBy) {
    this.travel(ast.groupBy);
  }
  if (ast.having) {
    this.appendKeyword('having');
    this.travel(ast.having);
  }
  if (ast.orderBy) {
    this.travel(ast.orderBy);
  }
  if (ast.limit) {
    this.travel(ast.limit);
  }
  if (ast.procedure) {
    this.appendKeyword('procedure');
    this.travel(ast.procedure);
  }
  if (ast.updateLockMode) {
    this.appendKeyword(ast.updateLockMode);
  }
};
Sql.prototype.travelSelectExpr = function(ast) {
  var exprList = ast.value;
  for (var i = 0; i < exprList.length; i++) {
    if (typeof ast === 'string') {
      this.append(exprList[i]);
    } else {
      this.travel(exprList[i]);
      if (exprList[i].alias) {
        if (exprList[i].hasAs) {
          this.appendKeyword('as');
        }
        this.travel(exprList[i].alias);
      }
    }
    if (i !== exprList.length - 1) {
      this.append(',', true);
    }
  }
};
Sql.prototype.travelIsExpression = function(ast) {
  this.travel(ast.left);
  this.appendKeyword('in');
  if (ast.hasNot) {
    this.appendKeyword('not');
  }
  this.append(ast.right);
};
Sql.prototype.travelNotExpression = function(ast) {
  this.appendKeyword('not');
  this.travel(ast.value);
};
Sql.prototype.travelOrExpression = Sql.prototype.travelAndExpression = Sql.prototype.travelXORExpression = function(
  ast
) {
  this.travel(ast.left);
  this.appendKeyword(ast.operator);
  this.travel(ast.right);
};
Sql.prototype.travelNull = Sql.prototype.travelBoolean = Sql.prototype.travelBooleanExtra = function(
  ast
) {
  this.appendKeyword(ast.value);
};
Sql.prototype.travelNumber = function(ast) {
  this.append(ast.value);
};
Sql.prototype.travelString = function(ast) {
  this.append(ast.value);
};
Sql.prototype.travelFunctionCall = function(ast) {
  this.append(ast.name);
  this.append('(', true, true);
  var params = ast.params;
  for (var i = 0; i < params.length; i++) {
    var param = params[i];
    this.travel(param);
    if (i !== params.length - 1) {
      this.append(',', true);
    }
  }
  this.append(')', true);
};
Sql.prototype.travelFunctionCallParam = function(ast) {
  if (ast.distinctOpt) {
    this.appendKeyword(ast.distinctOpt);
  }
  this.travel(ast.value);
};
Sql.prototype.travelIdentifier = function(ast) {
  this.append(ast.value);
};
Sql.prototype.travelIdentifierList = function(ast) {
  var list = ast.value;
  for (var i = 0; i < list.length; i++) {
    this.travel(list[i]);
    if (i !== list.length - 1) {
      this.append(',', true);
    }
  }
};
Sql.prototype.travelWhenThenList = function(ast) {
  var list = ast.value;
  for (var i = 0; i < list.length; i++) {
    this.appendKeyword('when');
    this.travel(list[i].when);
    this.appendKeyword('then');
    this.travel(list[i].then);
  }
};
Sql.prototype.travelCaseWhen = function(ast) {
  this.appendKeyword('case');
  if (ast.caseExprOpt) {
    this.travel(ast.caseExprOpt);
  }
  this.travel(ast.whenThenList);
  if (ast.else) {
    this.appendKeyword('else');
    this.travel(ast.else);
  }
  this.appendKeyword('end');
};
Sql.prototype.travelPrefix = function(ast) {
  this.appendKeyword(ast.prefix);
  this.travel(ast.value);
};
Sql.prototype.travelSimpleExprParentheses = function(ast) {
  if (ast.hasRow) {
    this.appendKeyword('row');
  }
  this.append('(', false, true);
  this.travel(ast.value);
  this.append(')', true);
};
Sql.prototype.travelSubQuery = function(ast) {
  if (ast.hasExists) {
    this.appendKeyword('exists');
  }
  this.append('(', false, true);
  this.travel(ast.value);
  this.append(')', true);
};
Sql.prototype.travelIdentifierExpr = function(ast) {
  this.append('{');
  this.travel(ast.identifier);
  this.travel(ast.value);
  this.append('}');
};
Sql.prototype.travelBitExpression = function(ast) {
  this.travel(ast.left);
  this.appendKeyword(ast.operator);
  this.travel(ast.right);
};
Sql.prototype.travelInSubQueryPredicate = function(ast) {
  this.travel(ast.left);
  if (ast.hasNot) {
    this.appendKeyword('not');
  }
  this.appendKeyword('in');
  this.append('(', false, true);
  this.travel(ast.right);
  this.append(')');
};
Sql.prototype.travelInExpressionListPredicate = function(ast) {
  this.travel(ast.left);
  if (ast.hasNot) {
    this.appendKeyword('not');
  }
  this.appendKeyword('in');
  this.append('(', false, true);
  this.travel(ast.right);
  this.append(')');
};
Sql.prototype.travelBetweenPredicate = function(ast) {
  this.travel(ast.left);
  if (ast.hasNot) {
    this.appendKeyword('not');
  }
  this.appendKeyword('between');
  this.travel(ast.right.left);
  this.appendKeyword('and');
  this.travel(ast.right.right);
};
Sql.prototype.travelSoundsLikePredicate = function(ast) {
  this.travel(ast.left);
  this.appendKeyword('sounds');
  this.appendKeyword('like');
  this.travel(ast.right);
};
Sql.prototype.travelLikePredicate = function(ast) {
  this.travel(ast.left);
  if (ast.hasNot) {
    this.appendKeyword('not');
  }
  this.appendKeyword('like');
  this.travel(ast.right);
  if (ast.escape) {
    this.appendKeyword('escape');
    this.travel(ast.escape);
  }
};
Sql.prototype.travelRegexpPredicate = function(ast) {
  this.travel(ast.left);
  if (ast.hasNot) {
    this.appendKeyword('not');
  }
  this.appendKeyword('regexp');
  this.travel(ast.right);
};
Sql.prototype.travelIsNullBooleanPrimary = function(ast) {
  this.travel(ast.value);
  this.appendKeyword('is');
  if (ast.hasNot) {
    this.appendKeyword('not');
  }
  this.appendKeyword('null');
};
Sql.prototype.travelComparisonBooleanPrimary = function(ast) {
  this.travel(ast.left);
  this.append(ast.operator);
  this.travel(ast.right);
};
Sql.prototype.travelComparisonSubQueryBooleanPrimary = function(ast) {
  this.travel(ast.left);
  this.append(ast.operator);
  this.appendKeyword(ast.subQueryOpt);
  this.append('(', false, true);
  this.travel(ast.right);
  this.append(')');
};
Sql.prototype.travelExpressionList = function(ast) {
  var list = ast.value;
  for (var i = 0; i < list.length; i++) {
    this.travel(list[i]);
    if (i !== list.length - 1) {
      this.append(',', true);
    }
  }
};
Sql.prototype.travelGroupBy = function(ast) {
  this.appendKeyword('group by');
  var list = ast.value;
  for (var i = 0; i < list.length; i++) {
    this.travel(list[i]);
    if (i !== list.length - 1) {
      this.append(',', true);
    }
  }
};
Sql.prototype.travelOrderBy = function(ast) {
  this.appendKeyword('order by');
  var list = ast.value;
  for (var i = 0; i < list.length; i++) {
    this.travel(list[i]);
    if (i !== list.length - 1) {
      this.append(',', true);
    }
  }
  if (ast.rollUp) {
    this.appendKeyword('with rollup');
  }
};
Sql.prototype.travelGroupByOrderByItem = function(ast) {
  this.travel(ast.value);
  if (ast.sortOpt) {
    this.appendKeyword(ast.sortOpt);
  }
};
Sql.prototype.travelLimit = function(ast) {
  this.appendKeyword('limit');
  var list = ast.value;
  if (list.length === 1) {
    this.append(list[0]);
  } else if (list.length === 2) {
    if (ast.offsetMode) {
      this.append(list[1]);
      this.append('offset');
      this.append(list[0]);
    } else {
      this.append(list[0]);
      this.append(',', true);
      this.append(list[1]);
    }
  }
};
Sql.prototype.travelTableReferences = function(ast) {
  var list = ast.value;
  if (ast.TableReferences) {
    this.append('(', false, true);
  }
  for (var i = 0; i < list.length; i++) {
    this.travel(list[i]);
    if (i !== list.length - 1) {
      this.append(',', true);
    }
  }
  if (ast.TableReferences) {
    this.append(')');
  }
};
Sql.prototype.travelTableReference = function(ast) {
  if (ast.hasOj) {
    this.append('{');
    this.appendKeyword('oj');
    this.travel(ast.value);
    this.append('}');
  } else {
    this.travel(ast.value);
  }
};
Sql.prototype.travelInnerCrossJoinTable = function(ast) {
  this.travel(ast.left);
  if (ast.innerCrossOpt) {
    this.appendKeyword(ast.innerCrossOpt);
  }
  this.appendKeyword('join');
  this.travel(ast.right);
  if (ast.condition) {
    this.travel(ast.condition);
  }
};
Sql.prototype.travelStraightJoinTable = function(ast) {
  this.travel(ast.left);
  this.appendKeyword('straight_join');
  this.travel(ast.right);
  this.travel(ast.condition);
};
Sql.prototype.travelLeftRightJoinTable = function(ast) {
  this.travel(ast.left);
  this.appendKeyword(ast.leftRight);
  if (ast.outOpt) {
    this.appendKeyword(ast.outOpt);
  }
  this.appendKeyword('join');
  this.travel(ast.right);
  this.travel(ast.condition);
};
Sql.prototype.travelNaturalJoinTable = function(ast) {
  this.travel(ast.left);
  this.appendKeyword('natural');
  if (ast.leftRight) {
    this.appendKeyword(ast.leftRight);
  }
  if (ast.outOpt) {
    this.appendKeyword(ast.outOpt);
  }
  this.appendKeyword('join');
  this.travel(ast.right);
};
Sql.prototype.travelOnJoinCondition = function(ast) {
  this.appendKeyword('on');
  this.travel(ast.value);
};
Sql.prototype.travelUsingJoinCondition = function(ast) {
  this.appendKeyword('using');
  this.appendKeyword('(', false, true);
  this.travel(ast.value);
  this.appendKeyword(')');
};
Sql.prototype.travelPartitions = function(ast) {
  this.appendKeyword('partition');
  this.appendKeyword('(', false, true);
  var list = ast.value;
  for (var i = 0; i < list.length; i++) {
    this.travel(list[i]);
    if (i !== list.length - 1) {
      this.append(',', true);
    }
  }
  this.appendKeyword(')');
};
Sql.prototype.travelForOptIndexHint = function(ast) {
  this.appendKeyword('for');
  this.appendKeyword(ast.value);
};
Sql.prototype.travelIndexList = function(ast) {
  var list = ast.value;
  for (var i = 0; i < list.length; i++) {
    this.travel(list[i]);
    if (i !== list.length - 1) {
      this.append(',', true);
    }
  }
};
Sql.prototype.travelUseIndexHint = function(ast) {
  this.appendKeyword('use');
  this.appendKeyword(ast.indexOrKey);
  if (ast.forOpt) {
    this.travel(ast.forOpt);
  }
  this.appendKeyword('(', false, true);
  if (ast.value) {
    this.travel(ast.value);
  }
  this.appendKeyword(')');
};
Sql.prototype.travelIgnoreIndexHint = function(ast) {
  this.appendKeyword('ignore');
  this.appendKeyword(ast.indexOrKey);
  if (ast.forOpt) {
    this.travel(ast.forOpt);
  }
  this.appendKeyword('(', false, true);
  if (ast.value) {
    this.travel(ast.value);
  }
  this.appendKeyword(')');
};
Sql.prototype.travelForceIndexHint = function(ast) {
  this.appendKeyword('force');
  this.appendKeyword(ast.indexOrKey);
  if (ast.forOpt) {
    this.travel(ast.forOpt);
  }
  this.appendKeyword('(', false, true);
  if (ast.value) {
    this.travel(ast.value);
  }
  this.appendKeyword(')');
};
Sql.prototype.travelTableFactor = function(ast) {
  this.travel(ast.value);
  if (ast.partition) {
    this.travel(ast.partition);
  }
  if (ast.alias) {
    if (ast.hasAs) {
      this.appendKeyword('as');
    }
    this.travel(ast.alias);
  }
  if (ast.indexHintOpt) {
    this.travel(ast.indexHintOpt);
  }
};
Sql.prototype.travelUnion = function(ast) {
  this.travel(ast.left);
  this.appendKeyword('UNION');
  if (ast.distinctOpt) {
    this.appendKeyword(ast.distinctOpt);
  }
  this.travel(ast.right);
};
Sql.prototype.travelSelectParenthesized = function(ast) {
  this.appendKeyword('(');
  this.travel(ast.value);
  this.appendKeyword(')');
};
var root = this
// AMD / RequireJS
if (typeof define !== 'undefined' && define.amd) {
    define([], function () {
        return sqlParser;
    });
}
// Node.js
else if (typeof module !== 'undefined' && module.exports) {
    module.exports = sqlParser;
}
// included directly via <script> tag
else {
    root.sqlParser = sqlParser;
}

